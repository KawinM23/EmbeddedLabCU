
Lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005118  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005318  08005318  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045f8  20000014  08005334  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000460c  08005334  0002460c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b3b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030af  00000000  00000000  00037b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  0003be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001760e  00000000  00000000  0003cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a74  00000000  00000000  000545a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095bed  00000000  00000000  0006801a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fdc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  000fdc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052a0 	.word	0x080052a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080052a0 	.word	0x080052a0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000030 	.word	0x20000030
 8000508:	20000084 	.word	0x20000084

0800050c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetTimerTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetTimerTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000284 	.word	0x20000284
 800053c:	200002d8 	.word	0x200002d8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b090      	sub	sp, #64	; 0x40
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fafd 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f861 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8f5 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f8c9 	bl	80006e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000556:	2300      	movs	r3, #0
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
 800055a:	2300      	movs	r3, #0
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800055e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000562:	4618      	mov	r0, r3
 8000564:	f002 f910 	bl	8002788 <osMutexCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <main+0xac>)
 800056c:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <main+0xb0>)
 8000570:	633b      	str	r3, [r7, #48]	; 0x30
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f88a 	bl	8002698 <osTimerCreate>
 8000584:	4603      	mov	r3, r0
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <main+0xb4>)
 8000588:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 800058a:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <main+0xb8>)
 800058c:	62bb      	str	r3, [r7, #40]	; 0x28
 800058e:	2300      	movs	r3, #0
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerPeriodic, NULL);
 8000592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000596:	2200      	movs	r2, #0
 8000598:	2101      	movs	r1, #1
 800059a:	4618      	mov	r0, r3
 800059c:	f002 f87c 	bl	8002698 <osTimerCreate>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4a16      	ldr	r2, [pc, #88]	; (80005fc <main+0xbc>)
 80005a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer03 */
  osTimerDef(myTimer03, Callback03);
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <main+0xc0>)
 80005a8:	623b      	str	r3, [r7, #32]
 80005aa:	2300      	movs	r3, #0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer03Handle = osTimerCreate(osTimer(myTimer03), osTimerPeriodic, NULL);
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2200      	movs	r2, #0
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f86e 	bl	8002698 <osTimerCreate>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0xc4>)
 80005c0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Thread1 */
  osThreadDef(Thread1, StartThread1, osPriorityNormal, 0, 128);
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <main+0xc8>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Thread1Handle = osThreadCreate(osThread(Thread1), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fffc 	bl	80025d6 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <main+0xcc>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e4:	f001 fff0 	bl	80025c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005e8:	e7fe      	b.n	80005e8 <main+0xa8>
 80005ea:	bf00      	nop
 80005ec:	2000457c 	.word	0x2000457c
 80005f0:	08000859 	.word	0x08000859
 80005f4:	20004534 	.word	0x20004534
 80005f8:	08000881 	.word	0x08000881
 80005fc:	2000452c 	.word	0x2000452c
 8000600:	0800089d 	.word	0x0800089d
 8000604:	20004530 	.word	0x20004530
 8000608:	080052c0 	.word	0x080052c0
 800060c:	20004528 	.word	0x20004528

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 fe36 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemClock_Config+0xd0>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd4>)
 800065e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000684:	2310      	movs	r3, #16
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068e:	2304      	movs	r3, #4
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000692:	2307      	movs	r3, #7
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fd2e 	bl	80010fc <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a6:	f000 f91f 	bl	80008e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2102      	movs	r1, #2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 ff90 	bl	80015ec <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d2:	f000 f909 	bl	80008e8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f001 fc12 	bl	8001f48 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f8dd 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20004538 	.word	0x20004538
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0xd0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <MX_GPIO_Init+0xd0>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <MX_GPIO_Init+0xd0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2120      	movs	r1, #32
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007c8:	f000 fc64 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_GPIO_Init+0xd8>)
 80007e4:	f000 fad2 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fac4 	bl	8000d8c <HAL_GPIO_Init>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020800 	.word	0x40020800

08000818 <StartThread1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartThread1 */
void StartThread1(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(myTimer01Handle, 50);
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <StartThread1+0x34>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2132      	movs	r1, #50	; 0x32
 8000826:	4618      	mov	r0, r3
 8000828:	f001 ff6a 	bl	8002700 <osTimerStart>
	osTimerStart(myTimer02Handle, 9);
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <StartThread1+0x38>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2109      	movs	r1, #9
 8000832:	4618      	mov	r0, r3
 8000834:	f001 ff64 	bl	8002700 <osTimerStart>
	osTimerStart(myTimer03Handle, 128);
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <StartThread1+0x3c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2180      	movs	r1, #128	; 0x80
 800083e:	4618      	mov	r0, r3
 8000840:	f001 ff5e 	bl	8002700 <osTimerStart>

	/* Infinite loop */
	for (;;) {
//		HAL_UART_Transmit(&huart2, &a, sizeof(a), HAL_MAX_DELAY);
		//vTaskDelay(pdMS_TO_TICKS(50));
		osDelay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f001 ff12 	bl	800266e <osDelay>
 800084a:	e7fb      	b.n	8000844 <StartThread1+0x2c>
 800084c:	20004534 	.word	0x20004534
 8000850:	2000452c 	.word	0x2000452c
 8000854:	20004530 	.word	0x20004530

08000858 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_UART_Transmit(&huart2, &a, sizeof(a), HAL_MAX_DELAY);
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	2201      	movs	r2, #1
 8000866:	4904      	ldr	r1, [pc, #16]	; (8000878 <Callback01+0x20>)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <Callback01+0x24>)
 800086a:	f001 fbba 	bl	8001fe2 <HAL_UART_Transmit>
  /* USER CODE END Callback01 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000000 	.word	0x20000000
 800087c:	20004538 	.word	0x20004538

08000880 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000888:	2120      	movs	r1, #32
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <Callback02+0x18>)
 800088c:	f000 fc1b 	bl	80010c6 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback02 */
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40020000 	.word	0x40020000

0800089c <Callback03>:

/* Callback03 function */
void Callback03(void const * argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback03 */
	HAL_UART_Transmit(&huart2, &b, sizeof(b), HAL_MAX_DELAY);
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2201      	movs	r2, #1
 80008aa:	4904      	ldr	r1, [pc, #16]	; (80008bc <Callback03+0x20>)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <Callback03+0x24>)
 80008ae:	f001 fb98 	bl	8001fe2 <HAL_UART_Transmit>
  /* USER CODE END Callback03 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000001 	.word	0x20000001
 80008c0:	20004538 	.word	0x20004538

080008c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d101      	bne.n	80008da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d6:	f000 f957 	bl	8000b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40010000 	.word	0x40010000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <HAL_MspInit+0x54>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <HAL_MspInit+0x54>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 f9fd 	bl	8000d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12b      	bne.n	80009c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009a6:	230c      	movs	r3, #12
 80009a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c2:	f000 f9e3 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 f9a1 	bl	8000d38 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009f6:	2019      	movs	r0, #25
 80009f8:	f000 f9ba 	bl	8000d70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_InitTick+0xa0>)
 8000a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a04:	4a1d      	ldr	r2, [pc, #116]	; (8000a7c <HAL_InitTick+0xa0>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_InitTick+0xa0>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 ffde 	bl	80019e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a28:	f000 ffc8 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 8000a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_InitTick+0xa4>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <HAL_InitTick+0xac>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a5e:	f000 fff3 	bl	8001a48 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a68:	4806      	ldr	r0, [pc, #24]	; (8000a84 <HAL_InitTick+0xa8>)
 8000a6a:	f001 f847 	bl	8001afc <HAL_TIM_Base_Start_IT>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3730      	adds	r7, #48	; 0x30
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20004580 	.word	0x20004580
 8000a88:	40010000 	.word	0x40010000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000abe:	f001 f87f 	bl	8001bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20004580 	.word	0x20004580

08000acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af6:	490e      	ldr	r1, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af8:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b0c:	4c0b      	ldr	r4, [pc, #44]	; (8000b3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1a:	f7ff ffd7 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f004 fb85 	bl	800522c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fd0d 	bl	8000540 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b34:	08005320 	.word	0x08005320
  ldr r2, =_sbss
 8000b38:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b3c:	2000460c 	.word	0x2000460c

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <HAL_Init+0x40>)
 8000b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_Init+0x40>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_Init+0x40>)
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f8d8 	bl	8000d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	200f      	movs	r0, #15
 8000b74:	f7ff ff32 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b78:	f7ff febc 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	200045c8 	.word	0x200045c8

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	200045c8 	.word	0x200045c8

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff4c 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4a:	f7ff ff61 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f7ff ffb1 	bl	8000cbc <NVIC_EncodePriority>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff80 	bl	8000c68 <__NVIC_SetPriority>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff54 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e159      	b.n	800105c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 8148 	bne.w	8001056 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a2 	beq.w	8001056 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b57      	ldr	r3, [pc, #348]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a56      	ldr	r2, [pc, #344]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a52      	ldr	r2, [pc, #328]	; (8001078 <HAL_GPIO_Init+0x2ec>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a49      	ldr	r2, [pc, #292]	; (800107c <HAL_GPIO_Init+0x2f0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x202>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a48      	ldr	r2, [pc, #288]	; (8001080 <HAL_GPIO_Init+0x2f4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x1fe>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a47      	ldr	r2, [pc, #284]	; (8001084 <HAL_GPIO_Init+0x2f8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x1fa>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a46      	ldr	r2, [pc, #280]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x1f6>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a45      	ldr	r2, [pc, #276]	; (800108c <HAL_GPIO_Init+0x300>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x1f2>
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	; (8001078 <HAL_GPIO_Init+0x2ec>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fae:	4b38      	ldr	r3, [pc, #224]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd2:	4a2f      	ldr	r2, [pc, #188]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffc:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_GPIO_Init+0x304>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001026:	4a1a      	ldr	r2, [pc, #104]	; (8001090 <HAL_GPIO_Init+0x304>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_GPIO_Init+0x304>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_GPIO_Init+0x304>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f aea2 	bls.w	8000da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40013c00 	.word	0x40013c00

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
 80010a0:	4613      	mov	r3, r2
 80010a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a4:	787b      	ldrb	r3, [r7, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010aa:	887a      	ldrh	r2, [r7, #2]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b0:	e003      	b.n	80010ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	041a      	lsls	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	619a      	str	r2, [r3, #24]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d8:	887a      	ldrh	r2, [r7, #2]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	041a      	lsls	r2, r3, #16
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	400b      	ands	r3, r1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e264      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d075      	beq.n	8001206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111a:	4ba3      	ldr	r3, [pc, #652]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d00c      	beq.n	8001140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4ba0      	ldr	r3, [pc, #640]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	2b08      	cmp	r3, #8
 8001130:	d112      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b9d      	ldr	r3, [pc, #628]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800113e:	d10b      	bne.n	8001158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d05b      	beq.n	8001204 <HAL_RCC_OscConfig+0x108>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d157      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e23f      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b91      	ldr	r3, [pc, #580]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a90      	ldr	r2, [pc, #576]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e01d      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a8a      	ldr	r2, [pc, #552]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a87      	ldr	r2, [pc, #540]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0xb0>
 8001194:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a83      	ldr	r2, [pc, #524]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a80      	ldr	r2, [pc, #512]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fcfc 	bl	8000bb0 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fcf8 	bl	8000bb0 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e204      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0xc0>
 80011da:	e014      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fce8 	bl	8000bb0 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e4:	f7ff fce4 	bl	8000bb0 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b64      	cmp	r3, #100	; 0x64
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e1f0      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f0      	bne.n	80011e4 <HAL_RCC_OscConfig+0xe8>
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d063      	beq.n	80012da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b62      	ldr	r3, [pc, #392]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d11c      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d116      	bne.n	8001264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e1c4      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124e:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4952      	ldr	r1, [pc, #328]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	4313      	orrs	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	e03a      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800126c:	4b4f      	ldr	r3, [pc, #316]	; (80013ac <HAL_RCC_OscConfig+0x2b0>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fc9d 	bl	8000bb0 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fc99 	bl	8000bb0 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1a5      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	4b46      	ldr	r3, [pc, #280]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4940      	ldr	r1, [pc, #256]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e015      	b.n	80012da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <HAL_RCC_OscConfig+0x2b0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc7c 	bl	8000bb0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc78 	bl	8000bb0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e184      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d030      	beq.n	8001348 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_RCC_OscConfig+0x2b4>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc5c 	bl	8000bb0 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc58 	bl	8000bb0 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e164      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x200>
 800131a:	e015      	b.n	8001348 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131c:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x2b4>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc45 	bl	8000bb0 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132a:	f7ff fc41 	bl	8000bb0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e14d      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80a0 	beq.w	8001496 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d121      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_RCC_OscConfig+0x2b8>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fc07 	bl	8000bb0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e011      	b.n	80013ca <HAL_RCC_OscConfig+0x2ce>
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	42470000 	.word	0x42470000
 80013b0:	42470e80 	.word	0x42470e80
 80013b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b8:	f7ff fbfa 	bl	8000bb0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e106      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ca:	4b85      	ldr	r3, [pc, #532]	; (80015e0 <HAL_RCC_OscConfig+0x4e4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x2f0>
 80013de:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ea:	e01c      	b.n	8001426 <HAL_RCC_OscConfig+0x32a>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x312>
 80013f4:	4b7b      	ldr	r3, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a7a      	ldr	r2, [pc, #488]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	; 0x70
 800140c:	e00b      	b.n	8001426 <HAL_RCC_OscConfig+0x32a>
 800140e:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141e:	4a71      	ldr	r2, [pc, #452]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001420:	f023 0304 	bic.w	r3, r3, #4
 8001424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d015      	beq.n	800145a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142e:	f7ff fbbf 	bl	8000bb0 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	e00a      	b.n	800144c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001436:	f7ff fbbb 	bl	8000bb0 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	f241 3288 	movw	r2, #5000	; 0x1388
 8001444:	4293      	cmp	r3, r2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0c5      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144c:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0ee      	beq.n	8001436 <HAL_RCC_OscConfig+0x33a>
 8001458:	e014      	b.n	8001484 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fba9 	bl	8000bb0 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001462:	f7ff fba5 	bl	8000bb0 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001470:	4293      	cmp	r3, r2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e0af      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ee      	bne.n	8001462 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d105      	bne.n	8001496 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148a:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 809b 	beq.w	80015d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a0:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d05c      	beq.n	8001566 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d141      	bne.n	8001538 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b4:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fb79 	bl	8000bb0 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fb75 	bl	8000bb0 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e081      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f0      	bne.n	80014c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	019b      	lsls	r3, r3, #6
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	085b      	lsrs	r3, r3, #1
 80014f8:	3b01      	subs	r3, #1
 80014fa:	041b      	lsls	r3, r3, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	061b      	lsls	r3, r3, #24
 8001504:	4937      	ldr	r1, [pc, #220]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb4e 	bl	8000bb0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb4a 	bl	8000bb0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e056      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x41c>
 8001536:	e04e      	b.n	80015d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x4ec>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fb37 	bl	8000bb0 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fb33 	bl	8000bb0 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e03f      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x44a>
 8001564:	e037      	b.n	80015d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e032      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d028      	beq.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d121      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d11a      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015a2:	4013      	ands	r3, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d111      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	3b01      	subs	r3, #1
 80015bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015be:	429a      	cmp	r2, r3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40007000 	.word	0x40007000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	42470060 	.word	0x42470060

080015ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0cc      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d90c      	bls.n	8001628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b65      	ldr	r3, [pc, #404]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b63      	ldr	r3, [pc, #396]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0b8      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d020      	beq.n	8001676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a58      	ldr	r2, [pc, #352]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800164a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001664:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	494d      	ldr	r1, [pc, #308]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	4313      	orrs	r3, r2
 8001674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d044      	beq.n	800170c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d119      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e07f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ba:	4b3b      	ldr	r3, [pc, #236]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e067      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ca:	4b37      	ldr	r3, [pc, #220]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f023 0203 	bic.w	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4934      	ldr	r1, [pc, #208]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016dc:	f7ff fa68 	bl	8000bb0 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e2:	e00a      	b.n	80016fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e4:	f7ff fa64 	bl	8000bb0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e04f      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 020c 	and.w	r2, r3, #12
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d1eb      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d20c      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e032      	b.n	800179a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4916      	ldr	r1, [pc, #88]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d009      	beq.n	8001772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001772:	f000 f821 	bl	80017b8 <HAL_RCC_GetSysClockFreq>
 8001776:	4602      	mov	r2, r0
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	490a      	ldr	r1, [pc, #40]	; (80017ac <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	5ccb      	ldrb	r3, [r1, r3]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f922 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00
 80017a8:	40023800 	.word	0x40023800
 80017ac:	080052f8 	.word	0x080052f8
 80017b0:	20000004 	.word	0x20000004
 80017b4:	20000008 	.word	0x20000008

080017b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d0:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d00d      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x40>
 80017dc:	2b08      	cmp	r3, #8
 80017de:	f200 80bd 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x1a4>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x34>
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ea:	e0b7      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017ee:	60bb      	str	r3, [r7, #8]
       break;
 80017f0:	e0b7      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017f2:	4b61      	ldr	r3, [pc, #388]	; (8001978 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80017f4:	60bb      	str	r3, [r7, #8]
      break;
 80017f6:	e0b4      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f8:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001800:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001802:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d04d      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180e:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	099b      	lsrs	r3, r3, #6
 8001814:	461a      	mov	r2, r3
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	ea02 0800 	and.w	r8, r2, r0
 8001826:	ea03 0901 	and.w	r9, r3, r1
 800182a:	4640      	mov	r0, r8
 800182c:	4649      	mov	r1, r9
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	014b      	lsls	r3, r1, #5
 8001838:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800183c:	0142      	lsls	r2, r0, #5
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	ebb0 0008 	subs.w	r0, r0, r8
 8001846:	eb61 0109 	sbc.w	r1, r1, r9
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	018b      	lsls	r3, r1, #6
 8001854:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001858:	0182      	lsls	r2, r0, #6
 800185a:	1a12      	subs	r2, r2, r0
 800185c:	eb63 0301 	sbc.w	r3, r3, r1
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	00d9      	lsls	r1, r3, #3
 800186a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800186e:	00d0      	lsls	r0, r2, #3
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	eb12 0208 	adds.w	r2, r2, r8
 8001878:	eb43 0309 	adc.w	r3, r3, r9
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0259      	lsls	r1, r3, #9
 8001886:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800188a:	0250      	lsls	r0, r2, #9
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	461a      	mov	r2, r3
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	f7fe fca0 	bl	80001e0 <__aeabi_uldivmod>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4613      	mov	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e04a      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	461a      	mov	r2, r3
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	ea02 0400 	and.w	r4, r2, r0
 80018c2:	ea03 0501 	and.w	r5, r3, r1
 80018c6:	4620      	mov	r0, r4
 80018c8:	4629      	mov	r1, r5
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	014b      	lsls	r3, r1, #5
 80018d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018d8:	0142      	lsls	r2, r0, #5
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	1b00      	subs	r0, r0, r4
 80018e0:	eb61 0105 	sbc.w	r1, r1, r5
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	018b      	lsls	r3, r1, #6
 80018ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018f2:	0182      	lsls	r2, r0, #6
 80018f4:	1a12      	subs	r2, r2, r0
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	f04f 0000 	mov.w	r0, #0
 80018fe:	f04f 0100 	mov.w	r1, #0
 8001902:	00d9      	lsls	r1, r3, #3
 8001904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001908:	00d0      	lsls	r0, r2, #3
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	1912      	adds	r2, r2, r4
 8001910:	eb45 0303 	adc.w	r3, r5, r3
 8001914:	f04f 0000 	mov.w	r0, #0
 8001918:	f04f 0100 	mov.w	r1, #0
 800191c:	0299      	lsls	r1, r3, #10
 800191e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001922:	0290      	lsls	r0, r2, #10
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	461a      	mov	r2, r3
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	f7fe fc54 	bl	80001e0 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	60bb      	str	r3, [r7, #8]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800195e:	60bb      	str	r3, [r7, #8]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	68bb      	ldr	r3, [r7, #8]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_GetHCLKFreq+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff0 	bl	800197c <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0a9b      	lsrs	r3, r3, #10
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	; (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08005308 	.word	0x08005308

080019bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019c0:	f7ff ffdc 	bl	800197c <HAL_RCC_GetHCLKFreq>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0b5b      	lsrs	r3, r3, #13
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4903      	ldr	r1, [pc, #12]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019d2:	5ccb      	ldrb	r3, [r1, r3]
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d8:	4618      	mov	r0, r3
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	08005308 	.word	0x08005308

080019e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	220f      	movs	r2, #15
 80019f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_RCC_GetClockConfig+0x5c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	08db      	lsrs	r3, r3, #3
 8001a1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_RCC_GetClockConfig+0x60>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0207 	and.w	r2, r3, #7
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	601a      	str	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e041      	b.n	8001ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f839 	bl	8001ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3304      	adds	r3, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 f9ca 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e044      	b.n	8001b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0201 	orr.w	r2, r2, #1
 8001b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <HAL_TIM_Base_Start_IT+0xb0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d018      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3e:	d013      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00e      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d009      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d004      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x6c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a16      	ldr	r2, [pc, #88]	; (8001bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d010      	beq.n	8001b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0201 	orr.w	r2, r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b8a:	e007      	b.n	8001b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	40000800 	.word	0x40000800
 8001bb8:	40000c00 	.word	0x40000c00
 8001bbc:	40014000 	.word	0x40014000

08001bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0202 	mvn.w	r2, #2
 8001bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ee 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8e0 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8f1 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0204 	mvn.w	r2, #4
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8c4 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8b6 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8c7 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d122      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0208 	mvn.w	r2, #8
 8001c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f89a 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8001cb0:	e005      	b.n	8001cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f88c 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f89d 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d122      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d11b      	bne.n	8001d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0210 	mvn.w	r2, #16
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2208      	movs	r2, #8
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f870 	bl	8001de4 <HAL_TIM_IC_CaptureCallback>
 8001d04:	e005      	b.n	8001d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f862 	bl	8001dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f873 	bl	8001df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10e      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0201 	mvn.w	r2, #1
 8001d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fdc0 	bl	80008c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5c:	2b80      	cmp	r3, #128	; 0x80
 8001d5e:	d107      	bne.n	8001d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8e2 	bl	8001f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d10e      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d107      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f838 	bl	8001e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0320 	and.w	r3, r3, #32
 8001da6:	2b20      	cmp	r3, #32
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0220 	mvn.w	r2, #32
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8ac 	bl	8001f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <TIM_Base_SetConfig+0xe4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00f      	beq.n	8001e58 <TIM_Base_SetConfig+0x38>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e3e:	d00b      	beq.n	8001e58 <TIM_Base_SetConfig+0x38>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <TIM_Base_SetConfig+0xe8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d007      	beq.n	8001e58 <TIM_Base_SetConfig+0x38>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a30      	ldr	r2, [pc, #192]	; (8001f0c <TIM_Base_SetConfig+0xec>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <TIM_Base_SetConfig+0x38>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <TIM_Base_SetConfig+0xf0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d108      	bne.n	8001e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0xe4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01b      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d017      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <TIM_Base_SetConfig+0xe8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <TIM_Base_SetConfig+0xec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00f      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <TIM_Base_SetConfig+0xf0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <TIM_Base_SetConfig+0xf4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1e      	ldr	r2, [pc, #120]	; (8001f18 <TIM_Base_SetConfig+0xf8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d003      	beq.n	8001eaa <TIM_Base_SetConfig+0x8a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <TIM_Base_SetConfig+0xfc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <TIM_Base_SetConfig+0xe4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d103      	bne.n	8001ef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	615a      	str	r2, [r3, #20]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40014000 	.word	0x40014000
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	40014800 	.word	0x40014800

08001f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e03f      	b.n	8001fda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fcec 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f929 	bl	80021e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b08a      	sub	sp, #40	; 0x28
 8001fe6:	af02      	add	r7, sp, #8
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d17c      	bne.n	80020fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_UART_Transmit+0x2c>
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e075      	b.n	80020fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_UART_Transmit+0x3e>
 800201c:	2302      	movs	r3, #2
 800201e:	e06e      	b.n	80020fe <HAL_UART_Transmit+0x11c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2221      	movs	r2, #33	; 0x21
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002036:	f7fe fdbb 	bl	8000bb0 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	88fa      	ldrh	r2, [r7, #6]
 8002040:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	88fa      	ldrh	r2, [r7, #6]
 8002046:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002050:	d108      	bne.n	8002064 <HAL_UART_Transmit+0x82>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	e003      	b.n	800206c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002074:	e02a      	b.n	80020cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2200      	movs	r2, #0
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 f840 	bl	8002106 <UART_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e036      	b.n	80020fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3302      	adds	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	e007      	b.n	80020be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	3301      	adds	r3, #1
 80020bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1cf      	bne.n	8002076 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f810 	bl	8002106 <UART_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e006      	b.n	80020fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b090      	sub	sp, #64	; 0x40
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	4613      	mov	r3, r2
 8002114:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002116:	e050      	b.n	80021ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211e:	d04c      	beq.n	80021ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <UART_WaitOnFlagUntilTimeout+0x30>
 8002126:	f7fe fd43 	bl	8000bb0 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002132:	429a      	cmp	r2, r3
 8002134:	d241      	bcs.n	80021ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	330c      	adds	r3, #12
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	e853 3f00 	ldrex	r3, [r3]
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800214c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002156:	637a      	str	r2, [r7, #52]	; 0x34
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800215c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215e:	e841 2300 	strex	r3, r2, [r1]
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e5      	bne.n	8002136 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3314      	adds	r3, #20
 8002170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	613b      	str	r3, [r7, #16]
   return(result);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3314      	adds	r3, #20
 8002188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800218a:	623a      	str	r2, [r7, #32]
 800218c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800218e:	69f9      	ldr	r1, [r7, #28]
 8002190:	6a3a      	ldr	r2, [r7, #32]
 8002192:	e841 2300 	strex	r3, r2, [r1]
 8002196:	61bb      	str	r3, [r7, #24]
   return(result);
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e5      	bne.n	800216a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e00f      	b.n	80021da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d09f      	beq.n	8002118 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3740      	adds	r7, #64	; 0x40
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e8:	b09f      	sub	sp, #124	; 0x7c
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	ea40 0301 	orr.w	r3, r0, r1
 8002204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	431a      	orrs	r2, r3
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	431a      	orrs	r2, r3
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4313      	orrs	r3, r2
 800221c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002228:	f021 010c 	bic.w	r1, r1, #12
 800222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002232:	430b      	orrs	r3, r1
 8002234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002242:	6999      	ldr	r1, [r3, #24]
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	ea40 0301 	orr.w	r3, r0, r1
 800224c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800224e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4bc5      	ldr	r3, [pc, #788]	; (8002568 <UART_SetConfig+0x384>)
 8002254:	429a      	cmp	r2, r3
 8002256:	d004      	beq.n	8002262 <UART_SetConfig+0x7e>
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4bc3      	ldr	r3, [pc, #780]	; (800256c <UART_SetConfig+0x388>)
 800225e:	429a      	cmp	r2, r3
 8002260:	d103      	bne.n	800226a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002262:	f7ff fbab 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 8002266:	6778      	str	r0, [r7, #116]	; 0x74
 8002268:	e002      	b.n	8002270 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800226a:	f7ff fb93 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 800226e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002278:	f040 80b6 	bne.w	80023e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800227c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227e:	461c      	mov	r4, r3
 8002280:	f04f 0500 	mov.w	r5, #0
 8002284:	4622      	mov	r2, r4
 8002286:	462b      	mov	r3, r5
 8002288:	1891      	adds	r1, r2, r2
 800228a:	6439      	str	r1, [r7, #64]	; 0x40
 800228c:	415b      	adcs	r3, r3
 800228e:	647b      	str	r3, [r7, #68]	; 0x44
 8002290:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002294:	1912      	adds	r2, r2, r4
 8002296:	eb45 0303 	adc.w	r3, r5, r3
 800229a:	f04f 0000 	mov.w	r0, #0
 800229e:	f04f 0100 	mov.w	r1, #0
 80022a2:	00d9      	lsls	r1, r3, #3
 80022a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a8:	00d0      	lsls	r0, r2, #3
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	1911      	adds	r1, r2, r4
 80022b0:	6639      	str	r1, [r7, #96]	; 0x60
 80022b2:	416b      	adcs	r3, r5
 80022b4:	667b      	str	r3, [r7, #100]	; 0x64
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	1891      	adds	r1, r2, r2
 80022c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80022c4:	415b      	adcs	r3, r3
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022d0:	f7fd ff86 	bl	80001e0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4ba5      	ldr	r3, [pc, #660]	; (8002570 <UART_SetConfig+0x38c>)
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	011e      	lsls	r6, r3, #4
 80022e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e4:	461c      	mov	r4, r3
 80022e6:	f04f 0500 	mov.w	r5, #0
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	1891      	adds	r1, r2, r2
 80022f0:	6339      	str	r1, [r7, #48]	; 0x30
 80022f2:	415b      	adcs	r3, r3
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80022fa:	1912      	adds	r2, r2, r4
 80022fc:	eb45 0303 	adc.w	r3, r5, r3
 8002300:	f04f 0000 	mov.w	r0, #0
 8002304:	f04f 0100 	mov.w	r1, #0
 8002308:	00d9      	lsls	r1, r3, #3
 800230a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230e:	00d0      	lsls	r0, r2, #3
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	1911      	adds	r1, r2, r4
 8002316:	65b9      	str	r1, [r7, #88]	; 0x58
 8002318:	416b      	adcs	r3, r5
 800231a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800231c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	461a      	mov	r2, r3
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	1891      	adds	r1, r2, r2
 8002328:	62b9      	str	r1, [r7, #40]	; 0x28
 800232a:	415b      	adcs	r3, r3
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002332:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002336:	f7fd ff53 	bl	80001e0 <__aeabi_uldivmod>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <UART_SetConfig+0x38c>)
 8002340:	fba3 1302 	umull	r1, r3, r3, r2
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	2164      	movs	r1, #100	; 0x64
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	3332      	adds	r3, #50	; 0x32
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <UART_SetConfig+0x38c>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002360:	441e      	add	r6, r3
 8002362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002364:	4618      	mov	r0, r3
 8002366:	f04f 0100 	mov.w	r1, #0
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	1894      	adds	r4, r2, r2
 8002370:	623c      	str	r4, [r7, #32]
 8002372:	415b      	adcs	r3, r3
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800237a:	1812      	adds	r2, r2, r0
 800237c:	eb41 0303 	adc.w	r3, r1, r3
 8002380:	f04f 0400 	mov.w	r4, #0
 8002384:	f04f 0500 	mov.w	r5, #0
 8002388:	00dd      	lsls	r5, r3, #3
 800238a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800238e:	00d4      	lsls	r4, r2, #3
 8002390:	4622      	mov	r2, r4
 8002392:	462b      	mov	r3, r5
 8002394:	1814      	adds	r4, r2, r0
 8002396:	653c      	str	r4, [r7, #80]	; 0x50
 8002398:	414b      	adcs	r3, r1
 800239a:	657b      	str	r3, [r7, #84]	; 0x54
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	1891      	adds	r1, r2, r2
 80023a8:	61b9      	str	r1, [r7, #24]
 80023aa:	415b      	adcs	r3, r3
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80023b6:	f7fd ff13 	bl	80001e0 <__aeabi_uldivmod>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4b6c      	ldr	r3, [pc, #432]	; (8002570 <UART_SetConfig+0x38c>)
 80023c0:	fba3 1302 	umull	r1, r3, r3, r2
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	2164      	movs	r1, #100	; 0x64
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	3332      	adds	r3, #50	; 0x32
 80023d2:	4a67      	ldr	r2, [pc, #412]	; (8002570 <UART_SetConfig+0x38c>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	095b      	lsrs	r3, r3, #5
 80023da:	f003 0207 	and.w	r2, r3, #7
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4432      	add	r2, r6
 80023e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023e6:	e0b9      	b.n	800255c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ea:	461c      	mov	r4, r3
 80023ec:	f04f 0500 	mov.w	r5, #0
 80023f0:	4622      	mov	r2, r4
 80023f2:	462b      	mov	r3, r5
 80023f4:	1891      	adds	r1, r2, r2
 80023f6:	6139      	str	r1, [r7, #16]
 80023f8:	415b      	adcs	r3, r3
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002400:	1912      	adds	r2, r2, r4
 8002402:	eb45 0303 	adc.w	r3, r5, r3
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	00d9      	lsls	r1, r3, #3
 8002410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002414:	00d0      	lsls	r0, r2, #3
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	eb12 0804 	adds.w	r8, r2, r4
 800241e:	eb43 0905 	adc.w	r9, r3, r5
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	008b      	lsls	r3, r1, #2
 8002436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800243a:	0082      	lsls	r2, r0, #2
 800243c:	4640      	mov	r0, r8
 800243e:	4649      	mov	r1, r9
 8002440:	f7fd fece 	bl	80001e0 <__aeabi_uldivmod>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4b49      	ldr	r3, [pc, #292]	; (8002570 <UART_SetConfig+0x38c>)
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	011e      	lsls	r6, r3, #4
 8002452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002454:	4618      	mov	r0, r3
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	1894      	adds	r4, r2, r2
 8002460:	60bc      	str	r4, [r7, #8]
 8002462:	415b      	adcs	r3, r3
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800246a:	1812      	adds	r2, r2, r0
 800246c:	eb41 0303 	adc.w	r3, r1, r3
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	f04f 0500 	mov.w	r5, #0
 8002478:	00dd      	lsls	r5, r3, #3
 800247a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800247e:	00d4      	lsls	r4, r2, #3
 8002480:	4622      	mov	r2, r4
 8002482:	462b      	mov	r3, r5
 8002484:	1814      	adds	r4, r2, r0
 8002486:	64bc      	str	r4, [r7, #72]	; 0x48
 8002488:	414b      	adcs	r3, r1
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	008b      	lsls	r3, r1, #2
 80024a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80024a4:	0082      	lsls	r2, r0, #2
 80024a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80024aa:	f7fd fe99 	bl	80001e0 <__aeabi_uldivmod>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <UART_SetConfig+0x38c>)
 80024b4:	fba3 1302 	umull	r1, r3, r3, r2
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	2164      	movs	r1, #100	; 0x64
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	3332      	adds	r3, #50	; 0x32
 80024c6:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <UART_SetConfig+0x38c>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d2:	441e      	add	r6, r3
 80024d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d6:	4618      	mov	r0, r3
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	1894      	adds	r4, r2, r2
 80024e2:	603c      	str	r4, [r7, #0]
 80024e4:	415b      	adcs	r3, r3
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024ec:	1812      	adds	r2, r2, r0
 80024ee:	eb41 0303 	adc.w	r3, r1, r3
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	f04f 0500 	mov.w	r5, #0
 80024fa:	00dd      	lsls	r5, r3, #3
 80024fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002500:	00d4      	lsls	r4, r2, #3
 8002502:	4622      	mov	r2, r4
 8002504:	462b      	mov	r3, r5
 8002506:	eb12 0a00 	adds.w	sl, r2, r0
 800250a:	eb43 0b01 	adc.w	fp, r3, r1
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002526:	0082      	lsls	r2, r0, #2
 8002528:	4650      	mov	r0, sl
 800252a:	4659      	mov	r1, fp
 800252c:	f7fd fe58 	bl	80001e0 <__aeabi_uldivmod>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <UART_SetConfig+0x38c>)
 8002536:	fba3 1302 	umull	r1, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2164      	movs	r1, #100	; 0x64
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	4a09      	ldr	r2, [pc, #36]	; (8002570 <UART_SetConfig+0x38c>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4432      	add	r2, r6
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	bf00      	nop
 800255e:	377c      	adds	r7, #124	; 0x7c
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002566:	bf00      	nop
 8002568:	40011000 	.word	0x40011000
 800256c:	40011400 	.word	0x40011400
 8002570:	51eb851f 	.word	0x51eb851f

08002574 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002586:	2b84      	cmp	r3, #132	; 0x84
 8002588:	d005      	beq.n	8002596 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800258a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	3303      	adds	r3, #3
 8002594:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025aa:	f3ef 8305 	mrs	r3, IPSR
 80025ae:	607b      	str	r3, [r7, #4]
  return(result);
 80025b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025cc:	f001 f8de 	bl	800378c <vTaskStartScheduler>
  
  return osOK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d8:	b089      	sub	sp, #36	; 0x24
 80025da:	af04      	add	r7, sp, #16
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <osThreadCreate+0x54>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685c      	ldr	r4, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681d      	ldr	r5, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691e      	ldr	r6, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ffb6 	bl	8002574 <makeFreeRtosPriority>
 8002608:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002612:	9202      	str	r2, [sp, #8]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	9100      	str	r1, [sp, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4632      	mov	r2, r6
 800261c:	4629      	mov	r1, r5
 800261e:	4620      	mov	r0, r4
 8002620:	f000 feec 	bl	80033fc <xTaskCreateStatic>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e01c      	b.n	8002664 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685c      	ldr	r4, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002636:	b29e      	uxth	r6, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff98 	bl	8002574 <makeFreeRtosPriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	4632      	mov	r2, r6
 8002652:	4629      	mov	r1, r5
 8002654:	4620      	mov	r0, r4
 8002656:	f000 ff2e 	bl	80034b6 <xTaskCreate>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d001      	beq.n	8002664 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002660:	2300      	movs	r3, #0
 8002662:	e000      	b.n	8002666 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800266e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <osDelay+0x16>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	e000      	b.n	8002686 <osDelay+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f001 f84c 	bl	8003724 <vTaskDelay>
  
  return osOK;
 800268c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	460b      	mov	r3, r1
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <osTimerCreate+0x20>
 80026b4:	2101      	movs	r1, #1
 80026b6:	e000      	b.n	80026ba <osTimerCreate+0x22>
 80026b8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80026c2:	9201      	str	r2, [sp, #4]
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	460a      	mov	r2, r1
 80026ca:	2101      	movs	r1, #1
 80026cc:	480b      	ldr	r0, [pc, #44]	; (80026fc <osTimerCreate+0x64>)
 80026ce:	f001 fe10 	bl	80042f2 <xTimerCreateStatic>
 80026d2:	4603      	mov	r3, r0
 80026d4:	e00e      	b.n	80026f4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <osTimerCreate+0x48>
 80026dc:	2201      	movs	r2, #1
 80026de:	e000      	b.n	80026e2 <osTimerCreate+0x4a>
 80026e0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2101      	movs	r1, #1
 80026ec:	4803      	ldr	r0, [pc, #12]	; (80026fc <osTimerCreate+0x64>)
 80026ee:	f001 fddf 	bl	80042b0 <xTimerCreate>
 80026f2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	080052dc 	.word	0x080052dc

08002700 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <osTimerStart+0x20>
    ticks = 1;
 800271c:	2301      	movs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002720:	f7ff ff40 	bl	80025a4 <inHandlerMode>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d01a      	beq.n	8002760 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	2200      	movs	r2, #0
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	2109      	movs	r1, #9
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f001 fe54 	bl	80043e4 <xTimerGenericCommand>
 800273c:	4603      	mov	r3, r0
 800273e:	2b01      	cmp	r3, #1
 8002740:	d002      	beq.n	8002748 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002742:	23ff      	movs	r3, #255	; 0xff
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e018      	b.n	800277a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <osTimerStart+0x7a>
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <osTimerStart+0x84>)
 8002750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	e00c      	b.n	800277a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	2104      	movs	r1, #4
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f001 fe3a 	bl	80043e4 <xTimerGenericCommand>
 8002770:	4603      	mov	r3, r0
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <osTimerStart+0x7a>
      result = osErrorOS;
 8002776:	23ff      	movs	r3, #255	; 0xff
 8002778:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800277a:	697b      	ldr	r3, [r7, #20]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 fa29 	bl	8002bf6 <xQueueCreateMutexStatic>
 80027a4:	4603      	mov	r3, r0
 80027a6:	e003      	b.n	80027b0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80027a8:	2001      	movs	r0, #1
 80027aa:	f000 fa0c 	bl	8002bc6 <xQueueCreateMutex>
 80027ae:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0208 	add.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0208 	add.w	r2, r3, #8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f103 0208 	add.w	r2, r3, #8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e00c      	b.n	8002894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3308      	adds	r3, #8
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e002      	b.n	8002888 <vListInsert+0x2e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d2f6      	bcs.n	8002882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6892      	ldr	r2, [r2, #8]
 80028e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6852      	ldr	r2, [r2, #4]
 80028ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d103      	bne.n	8002900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	1e5a      	subs	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800294a:	f002 f963 	bl	8004c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	441a      	add	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	3b01      	subs	r3, #1
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	441a      	add	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d114      	bne.n	80029ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01a      	beq.n	80029de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3310      	adds	r3, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 f971 	bl	8003c94 <xTaskRemoveFromEventList>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <xQueueGenericReset+0xcc>)
 80029ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	e009      	b.n	80029de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3310      	adds	r3, #16
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fef2 	bl	80027b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3324      	adds	r3, #36	; 0x24
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff feed 	bl	80027b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029de:	f002 f949 	bl	8004c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	e000ed04 	.word	0xe000ed04

080029f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a16:	bf00      	nop
 8002a18:	e7fe      	b.n	8002a18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <xQueueGenericCreateStatic+0x52>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <xQueueGenericCreateStatic+0x56>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <xQueueGenericCreateStatic+0x58>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10a      	bne.n	8002a62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	623b      	str	r3, [r7, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	e7fe      	b.n	8002a60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d102      	bne.n	8002a6e <xQueueGenericCreateStatic+0x7e>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <xQueueGenericCreateStatic+0x82>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <xQueueGenericCreateStatic+0x84>
 8002a72:	2300      	movs	r3, #0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	61fb      	str	r3, [r7, #28]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a8e:	2348      	movs	r3, #72	; 0x48
 8002a90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b48      	cmp	r3, #72	; 0x48
 8002a96:	d00a      	beq.n	8002aae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	61bb      	str	r3, [r7, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002aae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ac2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f83f 	bl	8002b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3730      	adds	r7, #48	; 0x30
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
}
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	3348      	adds	r3, #72	; 0x48
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 f99d 	bl	8004e58 <pvPortMalloc>
 8002b1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3348      	adds	r3, #72	; 0x48
 8002b2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f805 	bl	8002b54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b4a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e002      	b.n	8002b76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b82:	2101      	movs	r1, #1
 8002b84:	69b8      	ldr	r0, [r7, #24]
 8002b86:	f7ff fecb 	bl	8002920 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f837 	bl	8002c2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6939      	ldr	r1, [r7, #16]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff7e 	bl	8002ae0 <xQueueGenericCreate>
 8002be4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7ff ffd3 	bl	8002b92 <prvInitialiseMutex>

		return xNewQueue;
 8002bec:	68fb      	ldr	r3, [r7, #12]
	}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	6039      	str	r1, [r7, #0]
 8002c00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c02:	2301      	movs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2200      	movs	r2, #0
 8002c12:	6939      	ldr	r1, [r7, #16]
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f7ff feeb 	bl	80029f0 <xQueueGenericCreateStatic>
 8002c1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ffb8 	bl	8002b92 <prvInitialiseMutex>

		return xNewQueue;
 8002c22:	68fb      	ldr	r3, [r7, #12]
	}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08e      	sub	sp, #56	; 0x38
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <xQueueGenericSend+0x32>
	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <xQueueGenericSend+0x40>
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <xQueueGenericSend+0x44>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <xQueueGenericSend+0x46>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <xQueueGenericSend+0x60>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d103      	bne.n	8002c9a <xQueueGenericSend+0x6e>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <xQueueGenericSend+0x72>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <xQueueGenericSend+0x74>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10a      	bne.n	8002cba <xQueueGenericSend+0x8e>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	623b      	str	r3, [r7, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cba:	f001 f9a7 	bl	800400c <xTaskGetSchedulerState>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <xQueueGenericSend+0x9e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <xQueueGenericSend+0xa2>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueGenericSend+0xa4>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericSend+0xbe>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61fb      	str	r3, [r7, #28]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cea:	f001 ff93 	bl	8004c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d302      	bcc.n	8002d00 <xQueueGenericSend+0xd4>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d129      	bne.n	8002d54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d06:	f000 fa0b 	bl	8003120 <prvCopyDataToQueue>
 8002d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	3324      	adds	r3, #36	; 0x24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 ffbb 	bl	8003c94 <xTaskRemoveFromEventList>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <xQueueGenericSend+0x1f8>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	e00a      	b.n	8002d4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <xQueueGenericSend+0x1f8>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d4c:	f001 ff92 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e063      	b.n	8002e1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d5a:	f001 ff8b 	bl	8004c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e05c      	b.n	8002e1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fff3 	bl	8003d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d76:	f001 ff7d 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d7a:	f000 fd6d 	bl	8003858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d7e:	f001 ff49 	bl	8004c14 <vPortEnterCritical>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8e:	d103      	bne.n	8002d98 <xQueueGenericSend+0x16c>
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9e:	b25b      	sxtb	r3, r3
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSend+0x182>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dae:	f001 ff61 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002db2:	1d3a      	adds	r2, r7, #4
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4611      	mov	r1, r2
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ffe2 	bl	8003d84 <xTaskCheckForTimeOut>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d124      	bne.n	8002e10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc8:	f000 faa2 	bl	8003310 <prvIsQueueFull>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ff0a 	bl	8003bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de2:	f000 fa2d 	bl	8003240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002de6:	f000 fd45 	bl	8003874 <xTaskResumeAll>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f af7c 	bne.w	8002cea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <xQueueGenericSend+0x1f8>)
 8002df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	e772      	b.n	8002cea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e06:	f000 fa1b 	bl	8003240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e0a:	f000 fd33 	bl	8003874 <xTaskResumeAll>
 8002e0e:	e76c      	b.n	8002cea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e12:	f000 fa15 	bl	8003240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e16:	f000 fd2d 	bl	8003874 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3738      	adds	r7, #56	; 0x38
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b090      	sub	sp, #64	; 0x40
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <xQueueGenericSendFromISR+0x3c>
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <xQueueGenericSendFromISR+0x40>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <xQueueGenericSendFromISR+0x42>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002e80:	bf00      	nop
 8002e82:	e7fe      	b.n	8002e82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d103      	bne.n	8002e92 <xQueueGenericSendFromISR+0x6a>
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <xQueueGenericSendFromISR+0x6e>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <xQueueGenericSendFromISR+0x70>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	623b      	str	r3, [r7, #32]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002eb2:	f001 ff91 	bl	8004dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002eb6:	f3ef 8211 	mrs	r2, BASEPRI
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	61fa      	str	r2, [r7, #28]
 8002ecc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ece:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <xQueueGenericSendFromISR+0xbc>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d12f      	bne.n	8002f44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002efa:	f000 f911 	bl	8003120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002efe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d112      	bne.n	8002f2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d016      	beq.n	8002f3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f12:	3324      	adds	r3, #36	; 0x24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 febd 	bl	8003c94 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e007      	b.n	8002f3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f32:	3301      	adds	r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	b25a      	sxtb	r2, r3
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f42:	e001      	b.n	8002f48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3740      	adds	r7, #64	; 0x40
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <xQueueReceive+0x30>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	623b      	str	r3, [r7, #32]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d103      	bne.n	8002f9e <xQueueReceive+0x3e>
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueReceive+0x42>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueReceive+0x44>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10a      	bne.n	8002fbe <xQueueReceive+0x5e>
	__asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	61fb      	str	r3, [r7, #28]
}
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fbe:	f001 f825 	bl	800400c <xTaskGetSchedulerState>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <xQueueReceive+0x6e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <xQueueReceive+0x72>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <xQueueReceive+0x74>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xQueueReceive+0x8e>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	61bb      	str	r3, [r7, #24]
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fee:	f001 fe11 	bl	8004c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01f      	beq.n	800303e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003002:	f000 f8f7 	bl	80031f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1e5a      	subs	r2, r3, #1
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003018:	3310      	adds	r3, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fe3a 	bl	8003c94 <xTaskRemoveFromEventList>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <xQueueReceive+0x1bc>)
 8003028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003036:	f001 fe1d 	bl	8004c74 <vPortExitCritical>
				return pdPASS;
 800303a:	2301      	movs	r3, #1
 800303c:	e069      	b.n	8003112 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003044:	f001 fe16 	bl	8004c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003048:	2300      	movs	r3, #0
 800304a:	e062      	b.n	8003112 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fe7e 	bl	8003d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800305c:	2301      	movs	r3, #1
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003060:	f001 fe08 	bl	8004c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003064:	f000 fbf8 	bl	8003858 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003068:	f001 fdd4 	bl	8004c14 <vPortEnterCritical>
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003072:	b25b      	sxtb	r3, r3
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d103      	bne.n	8003082 <xQueueReceive+0x122>
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003088:	b25b      	sxtb	r3, r3
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d103      	bne.n	8003098 <xQueueReceive+0x138>
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003098:	f001 fdec 	bl	8004c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800309c:	1d3a      	adds	r2, r7, #4
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fe6d 	bl	8003d84 <xTaskCheckForTimeOut>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d123      	bne.n	80030f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b2:	f000 f917 	bl	80032e4 <prvIsQueueEmpty>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	3324      	adds	r3, #36	; 0x24
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 fd95 	bl	8003bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030cc:	f000 f8b8 	bl	8003240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030d0:	f000 fbd0 	bl	8003874 <xTaskResumeAll>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d189      	bne.n	8002fee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <xQueueReceive+0x1bc>)
 80030dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	e780      	b.n	8002fee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ee:	f000 f8a7 	bl	8003240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030f2:	f000 fbbf 	bl	8003874 <xTaskResumeAll>
 80030f6:	e77a      	b.n	8002fee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030fa:	f000 f8a1 	bl	8003240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030fe:	f000 fbb9 	bl	8003874 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003104:	f000 f8ee 	bl	80032e4 <prvIsQueueEmpty>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	f43f af6f 	beq.w	8002fee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003112:	4618      	mov	r0, r3
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d14d      	bne.n	80031e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff7c 	bl	8004048 <xTaskPriorityDisinherit>
 8003150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	e043      	b.n	80031e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d119      	bne.n	8003194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6858      	ldr	r0, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	461a      	mov	r2, r3
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	f002 f882 	bl	8005274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d32b      	bcc.n	80031e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	e026      	b.n	80031e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68d8      	ldr	r0, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	f002 f868 	bl	8005274 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	425b      	negs	r3, r3
 80031ae:	441a      	add	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d207      	bcs.n	80031d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	425b      	negs	r3, r3
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d105      	bne.n	80031e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3b01      	subs	r3, #1
 80031e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031ea:	697b      	ldr	r3, [r7, #20]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d018      	beq.n	8003238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	429a      	cmp	r2, r3
 800321e:	d303      	bcc.n	8003228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68d9      	ldr	r1, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	461a      	mov	r2, r3
 8003232:	6838      	ldr	r0, [r7, #0]
 8003234:	f002 f81e 	bl	8005274 <memcpy>
	}
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003248:	f001 fce4 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003254:	e011      	b.n	800327a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	d012      	beq.n	8003284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3324      	adds	r3, #36	; 0x24
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fd16 	bl	8003c94 <xTaskRemoveFromEventList>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800326e:	f000 fdeb 	bl	8003e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3b01      	subs	r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	dce9      	bgt.n	8003256 <prvUnlockQueue+0x16>
 8003282:	e000      	b.n	8003286 <prvUnlockQueue+0x46>
					break;
 8003284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800328e:	f001 fcf1 	bl	8004c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003292:	f001 fcbf 	bl	8004c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800329c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800329e:	e011      	b.n	80032c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3310      	adds	r3, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fcf1 	bl	8003c94 <xTaskRemoveFromEventList>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032b8:	f000 fdc6 	bl	8003e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032bc:	7bbb      	ldrb	r3, [r7, #14]
 80032be:	3b01      	subs	r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dce9      	bgt.n	80032a0 <prvUnlockQueue+0x60>
 80032cc:	e000      	b.n	80032d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032d8:	f001 fccc 	bl	8004c74 <vPortExitCritical>
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032ec:	f001 fc92 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032f8:	2301      	movs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e001      	b.n	8003302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003302:	f001 fcb7 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003318:	f001 fc7c 	bl	8004c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	429a      	cmp	r2, r3
 8003326:	d102      	bne.n	800332e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e001      	b.n	8003332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003332:	f001 fc9f 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e014      	b.n	800337a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <vQueueAddToRegistry+0x50>)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800335c:	490c      	ldr	r1, [pc, #48]	; (8003390 <vQueueAddToRegistry+0x50>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <vQueueAddToRegistry+0x50>)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003372:	e006      	b.n	8003382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3301      	adds	r3, #1
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b07      	cmp	r3, #7
 800337e:	d9e7      	bls.n	8003350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200045cc 	.word	0x200045cc

08003394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80033a4:	f001 fc36 	bl	8004c14 <vPortEnterCritical>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ae:	b25b      	sxtb	r3, r3
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d103      	bne.n	80033be <vQueueWaitForMessageRestricted+0x2a>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033c4:	b25b      	sxtb	r3, r3
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ca:	d103      	bne.n	80033d4 <vQueueWaitForMessageRestricted+0x40>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033d4:	f001 fc4e 	bl	8004c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d106      	bne.n	80033ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3324      	adds	r3, #36	; 0x24
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fc27 	bl	8003c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7ff ff26 	bl	8003240 <prvUnlockQueue>
	}
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af04      	add	r7, sp, #16
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800340a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	623b      	str	r3, [r7, #32]
}
 8003422:	bf00      	nop
 8003424:	e7fe      	b.n	8003424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <xTaskCreateStatic+0x46>
	__asm volatile
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	61fb      	str	r3, [r7, #28]
}
 800343e:	bf00      	nop
 8003440:	e7fe      	b.n	8003440 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003442:	2354      	movs	r3, #84	; 0x54
 8003444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b54      	cmp	r3, #84	; 0x54
 800344a:	d00a      	beq.n	8003462 <xTaskCreateStatic+0x66>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	61bb      	str	r3, [r7, #24]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01e      	beq.n	80034a8 <xTaskCreateStatic+0xac>
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003482:	2300      	movs	r3, #0
 8003484:	9303      	str	r3, [sp, #12]
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	9302      	str	r3, [sp, #8]
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f850 	bl	8003540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034a2:	f000 f8d5 	bl	8003650 <prvAddNewTaskToReadyList>
 80034a6:	e001      	b.n	80034ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80034ac:	697b      	ldr	r3, [r7, #20]
	}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08c      	sub	sp, #48	; 0x30
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 fcc4 	bl	8004e58 <pvPortMalloc>
 80034d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80034d8:	2054      	movs	r0, #84	; 0x54
 80034da:	f001 fcbd 	bl	8004e58 <pvPortMalloc>
 80034de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
 80034ec:	e005      	b.n	80034fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f001 fd7e 	bl	8004ff0 <vPortFree>
 80034f4:	e001      	b.n	80034fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003508:	88fa      	ldrh	r2, [r7, #6]
 800350a:	2300      	movs	r3, #0
 800350c:	9303      	str	r3, [sp, #12]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	9302      	str	r3, [sp, #8]
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f80e 	bl	8003540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003524:	69f8      	ldr	r0, [r7, #28]
 8003526:	f000 f893 	bl	8003650 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e002      	b.n	8003536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003530:	f04f 33ff 	mov.w	r3, #4294967295
 8003534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003536:	69bb      	ldr	r3, [r7, #24]
	}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003558:	3b01      	subs	r3, #1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	f023 0307 	bic.w	r3, r3, #7
 8003566:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	617b      	str	r3, [r7, #20]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d01f      	beq.n	80035ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e012      	b.n	80035ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	7819      	ldrb	r1, [r3, #0]
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	3334      	adds	r3, #52	; 0x34
 80035a4:	460a      	mov	r2, r1
 80035a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	3301      	adds	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d9e9      	bls.n	8003594 <prvInitialiseNewTask+0x54>
 80035c0:	e000      	b.n	80035c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80035c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035cc:	e003      	b.n	80035d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	2b06      	cmp	r3, #6
 80035da:	d901      	bls.n	80035e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035dc:	2306      	movs	r3, #6
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2200      	movs	r2, #0
 80035f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f8fe 	bl	80027f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	3318      	adds	r3, #24
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f8f9 	bl	80027f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	f1c3 0207 	rsb	r2, r3, #7
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	2200      	movs	r2, #0
 8003620:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	69b8      	ldr	r0, [r7, #24]
 8003630:	f001 f9c2 	bl	80049b8 <pxPortInitialiseStack>
 8003634:	4602      	mov	r2, r0
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003646:	bf00      	nop
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003658:	f001 fadc 	bl	8004c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800365c:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <prvAddNewTaskToReadyList+0xb8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <prvAddNewTaskToReadyList+0xb8>)
 8003664:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003666:	4b29      	ldr	r3, [pc, #164]	; (800370c <prvAddNewTaskToReadyList+0xbc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800366e:	4a27      	ldr	r2, [pc, #156]	; (800370c <prvAddNewTaskToReadyList+0xbc>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003674:	4b24      	ldr	r3, [pc, #144]	; (8003708 <prvAddNewTaskToReadyList+0xb8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d110      	bne.n	800369e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800367c:	f000 fc08 	bl	8003e90 <prvInitialiseTaskLists>
 8003680:	e00d      	b.n	800369e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003682:	4b23      	ldr	r3, [pc, #140]	; (8003710 <prvAddNewTaskToReadyList+0xc0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <prvAddNewTaskToReadyList+0xbc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	429a      	cmp	r2, r3
 8003696:	d802      	bhi.n	800369e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <prvAddNewTaskToReadyList+0xbc>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <prvAddNewTaskToReadyList+0xc4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3301      	adds	r3, #1
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <prvAddNewTaskToReadyList+0xc4>)
 80036a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <prvAddNewTaskToReadyList+0xc8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	4a18      	ldr	r2, [pc, #96]	; (8003718 <prvAddNewTaskToReadyList+0xc8>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4a15      	ldr	r2, [pc, #84]	; (800371c <prvAddNewTaskToReadyList+0xcc>)
 80036c8:	441a      	add	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7ff f89e 	bl	8002812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80036d6:	f001 facd 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <prvAddNewTaskToReadyList+0xc0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvAddNewTaskToReadyList+0xbc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <prvAddNewTaskToReadyList+0xd0>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200007d8 	.word	0x200007d8
 800370c:	200006d8 	.word	0x200006d8
 8003710:	200007e4 	.word	0x200007e4
 8003714:	200007f4 	.word	0x200007f4
 8003718:	200007e0 	.word	0x200007e0
 800371c:	200006dc 	.word	0x200006dc
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <vTaskDelay+0x60>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <vTaskDelay+0x30>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60bb      	str	r3, [r7, #8]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003754:	f000 f880 	bl	8003858 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003758:	2100      	movs	r1, #0
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fcfa 	bl	8004154 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003760:	f000 f888 	bl	8003874 <xTaskResumeAll>
 8003764:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <vTaskDelay+0x64>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000800 	.word	0x20000800
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800379a:	463a      	mov	r2, r7
 800379c:	1d39      	adds	r1, r7, #4
 800379e:	f107 0308 	add.w	r3, r7, #8
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fe98 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80037a8:	6839      	ldr	r1, [r7, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	9202      	str	r2, [sp, #8]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2300      	movs	r3, #0
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	460a      	mov	r2, r1
 80037ba:	4921      	ldr	r1, [pc, #132]	; (8003840 <vTaskStartScheduler+0xb4>)
 80037bc:	4821      	ldr	r0, [pc, #132]	; (8003844 <vTaskStartScheduler+0xb8>)
 80037be:	f7ff fe1d 	bl	80033fc <xTaskCreateStatic>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <vTaskStartScheduler+0xbc>)
 80037c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80037c8:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <vTaskStartScheduler+0xbc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	e001      	b.n	80037da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d102      	bne.n	80037e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80037e0:	f000 fd1e 	bl	8004220 <xTimerCreateTimerTask>
 80037e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d116      	bne.n	800381a <vTaskStartScheduler+0x8e>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	613b      	str	r3, [r7, #16]
}
 80037fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <vTaskStartScheduler+0xc0>)
 8003802:	f04f 32ff 	mov.w	r2, #4294967295
 8003806:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <vTaskStartScheduler+0xc4>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800380e:	4b11      	ldr	r3, [pc, #68]	; (8003854 <vTaskStartScheduler+0xc8>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003814:	f001 f95c 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003818:	e00e      	b.n	8003838 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d10a      	bne.n	8003838 <vTaskStartScheduler+0xac>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60fb      	str	r3, [r7, #12]
}
 8003834:	bf00      	nop
 8003836:	e7fe      	b.n	8003836 <vTaskStartScheduler+0xaa>
}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	080052e0 	.word	0x080052e0
 8003844:	08003e61 	.word	0x08003e61
 8003848:	200007fc 	.word	0x200007fc
 800384c:	200007f8 	.word	0x200007f8
 8003850:	200007e4 	.word	0x200007e4
 8003854:	200007dc 	.word	0x200007dc

08003858 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800385c:	4b04      	ldr	r3, [pc, #16]	; (8003870 <vTaskSuspendAll+0x18>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	4a03      	ldr	r2, [pc, #12]	; (8003870 <vTaskSuspendAll+0x18>)
 8003864:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000800 	.word	0x20000800

08003874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <xTaskResumeAll+0x114>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	603b      	str	r3, [r7, #0]
}
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038a0:	f001 f9b8 	bl	8004c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038a4:	4b38      	ldr	r3, [pc, #224]	; (8003988 <xTaskResumeAll+0x114>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	4a37      	ldr	r2, [pc, #220]	; (8003988 <xTaskResumeAll+0x114>)
 80038ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ae:	4b36      	ldr	r3, [pc, #216]	; (8003988 <xTaskResumeAll+0x114>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d161      	bne.n	800397a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038b6:	4b35      	ldr	r3, [pc, #212]	; (800398c <xTaskResumeAll+0x118>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d05d      	beq.n	800397a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038be:	e02e      	b.n	800391e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c0:	4b33      	ldr	r3, [pc, #204]	; (8003990 <xTaskResumeAll+0x11c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3318      	adds	r3, #24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fffd 	bl	80028cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fff8 	bl	80028cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	2201      	movs	r2, #1
 80038e2:	409a      	lsls	r2, r3
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <xTaskResumeAll+0x120>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <xTaskResumeAll+0x120>)
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a27      	ldr	r2, [pc, #156]	; (8003998 <xTaskResumeAll+0x124>)
 80038fc:	441a      	add	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f7fe ff84 	bl	8002812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	4b23      	ldr	r3, [pc, #140]	; (800399c <xTaskResumeAll+0x128>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d302      	bcc.n	800391e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <xTaskResumeAll+0x12c>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <xTaskResumeAll+0x11c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1cc      	bne.n	80038c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800392c:	f000 fb4e 	bl	8003fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003930:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <xTaskResumeAll+0x130>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800393c:	f000 f846 	bl	80039cc <xTaskIncrementTick>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <xTaskResumeAll+0x12c>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f1      	bne.n	800393c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <xTaskResumeAll+0x130>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <xTaskResumeAll+0x12c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <xTaskResumeAll+0x134>)
 800396c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800397a:	f001 f97b 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 800397e:	68bb      	ldr	r3, [r7, #8]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000800 	.word	0x20000800
 800398c:	200007d8 	.word	0x200007d8
 8003990:	20000798 	.word	0x20000798
 8003994:	200007e0 	.word	0x200007e0
 8003998:	200006dc 	.word	0x200006dc
 800399c:	200006d8 	.word	0x200006d8
 80039a0:	200007ec 	.word	0x200007ec
 80039a4:	200007e8 	.word	0x200007e8
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <xTaskGetTickCount+0x1c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200007dc 	.word	0x200007dc

080039cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d6:	4b4e      	ldr	r3, [pc, #312]	; (8003b10 <xTaskIncrementTick+0x144>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 808e 	bne.w	8003afc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e0:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <xTaskIncrementTick+0x148>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80039e8:	4a4a      	ldr	r2, [pc, #296]	; (8003b14 <xTaskIncrementTick+0x148>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d120      	bne.n	8003a36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80039f4:	4b48      	ldr	r3, [pc, #288]	; (8003b18 <xTaskIncrementTick+0x14c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <xTaskIncrementTick+0x48>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	603b      	str	r3, [r7, #0]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xTaskIncrementTick+0x46>
 8003a14:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <xTaskIncrementTick+0x150>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <xTaskIncrementTick+0x150>)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <xTaskIncrementTick+0x154>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <xTaskIncrementTick+0x154>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	f000 facb 	bl	8003fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d348      	bcc.n	8003ad2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d104      	bne.n	8003a54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a4a:	4b36      	ldr	r3, [pc, #216]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	601a      	str	r2, [r3, #0]
					break;
 8003a52:	e03e      	b.n	8003ad2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <xTaskIncrementTick+0x14c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d203      	bcs.n	8003a74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a6c:	4a2d      	ldr	r2, [pc, #180]	; (8003b24 <xTaskIncrementTick+0x158>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a72:	e02e      	b.n	8003ad2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe ff27 	bl	80028cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3318      	adds	r3, #24
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe ff1e 	bl	80028cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	409a      	lsls	r2, r3
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <xTaskIncrementTick+0x15c>)
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4610      	mov	r0, r2
 8003aba:	f7fe feaa 	bl	8002812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3b9      	bcc.n	8003a40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad0:	e7b6      	b.n	8003a40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ad2:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <xTaskIncrementTick+0x164>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	4914      	ldr	r1, [pc, #80]	; (8003b2c <xTaskIncrementTick+0x160>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d901      	bls.n	8003aee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003aea:	2301      	movs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <xTaskIncrementTick+0x168>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003af6:	2301      	movs	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e004      	b.n	8003b06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <xTaskIncrementTick+0x16c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	4a0d      	ldr	r2, [pc, #52]	; (8003b38 <xTaskIncrementTick+0x16c>)
 8003b04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b06:	697b      	ldr	r3, [r7, #20]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000800 	.word	0x20000800
 8003b14:	200007dc 	.word	0x200007dc
 8003b18:	20000790 	.word	0x20000790
 8003b1c:	20000794 	.word	0x20000794
 8003b20:	200007f0 	.word	0x200007f0
 8003b24:	200007f8 	.word	0x200007f8
 8003b28:	200007e0 	.word	0x200007e0
 8003b2c:	200006dc 	.word	0x200006dc
 8003b30:	200006d8 	.word	0x200006d8
 8003b34:	200007ec 	.word	0x200007ec
 8003b38:	200007e8 	.word	0x200007e8

08003b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b42:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <vTaskSwitchContext+0xa4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <vTaskSwitchContext+0xa8>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b50:	e03f      	b.n	8003bd2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003b52:	4b24      	ldr	r3, [pc, #144]	; (8003be4 <vTaskSwitchContext+0xa8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <vTaskSwitchContext+0xac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	fab3 f383 	clz	r3, r3
 8003b64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b66:	7afb      	ldrb	r3, [r7, #11]
 8003b68:	f1c3 031f 	rsb	r3, r3, #31
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	491f      	ldr	r1, [pc, #124]	; (8003bec <vTaskSwitchContext+0xb0>)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	607b      	str	r3, [r7, #4]
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <vTaskSwitchContext+0x5a>
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <vTaskSwitchContext+0xb0>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d104      	bne.n	8003bc8 <vTaskSwitchContext+0x8c>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <vTaskSwitchContext+0xb4>)
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000800 	.word	0x20000800
 8003be4:	200007ec 	.word	0x200007ec
 8003be8:	200007e0 	.word	0x200007e0
 8003bec:	200006dc 	.word	0x200006dc
 8003bf0:	200006d8 	.word	0x200006d8

08003bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	60fb      	str	r3, [r7, #12]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <vTaskPlaceOnEventList+0x44>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe fe19 	bl	800285a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c28:	2101      	movs	r1, #1
 8003c2a:	6838      	ldr	r0, [r7, #0]
 8003c2c:	f000 fa92 	bl	8004154 <prvAddCurrentTaskToDelayedList>
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	200006d8 	.word	0x200006d8

08003c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10a      	bne.n	8003c64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	617b      	str	r3, [r7, #20]
}
 8003c60:	bf00      	nop
 8003c62:	e7fe      	b.n	8003c62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <vTaskPlaceOnEventListRestricted+0x54>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3318      	adds	r3, #24
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f7fe fdd0 	bl	8002812 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	68b8      	ldr	r0, [r7, #8]
 8003c82:	f000 fa67 	bl	8004154 <prvAddCurrentTaskToDelayedList>
	}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200006d8 	.word	0x200006d8

08003c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fe01 	bl	80028cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <xTaskRemoveFromEventList+0xac>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11c      	bne.n	8003d0c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fdf8 	bl	80028cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <xTaskRemoveFromEventList+0xb0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <xTaskRemoveFromEventList+0xb0>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <xTaskRemoveFromEventList+0xb4>)
 8003cfc:	441a      	add	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fd84 	bl	8002812 <vListInsertEnd>
 8003d0a:	e005      	b.n	8003d18 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3318      	adds	r3, #24
 8003d10:	4619      	mov	r1, r3
 8003d12:	480e      	ldr	r0, [pc, #56]	; (8003d4c <xTaskRemoveFromEventList+0xb8>)
 8003d14:	f7fe fd7d 	bl	8002812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <xTaskRemoveFromEventList+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d905      	bls.n	8003d32 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <xTaskRemoveFromEventList+0xc0>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e001      	b.n	8003d36 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d36:	697b      	ldr	r3, [r7, #20]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000800 	.word	0x20000800
 8003d44:	200007e0 	.word	0x200007e0
 8003d48:	200006dc 	.word	0x200006dc
 8003d4c:	20000798 	.word	0x20000798
 8003d50:	200006d8 	.word	0x200006d8
 8003d54:	200007ec 	.word	0x200007ec

08003d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <vTaskInternalSetTimeOutState+0x24>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <vTaskInternalSetTimeOutState+0x28>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	605a      	str	r2, [r3, #4]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	200007f0 	.word	0x200007f0
 8003d80:	200007dc 	.word	0x200007dc

08003d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
}
 8003da6:	bf00      	nop
 8003da8:	e7fe      	b.n	8003da8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	60fb      	str	r3, [r7, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003dc6:	f000 ff25 	bl	8004c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003dca:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <xTaskCheckForTimeOut+0xbc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d102      	bne.n	8003dea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	e023      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <xTaskCheckForTimeOut+0xc0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d007      	beq.n	8003e06 <xTaskCheckForTimeOut+0x82>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e015      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d20b      	bcs.n	8003e28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff9b 	bl	8003d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	e004      	b.n	8003e32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003e32:	f000 ff1f 	bl	8004c74 <vPortExitCritical>

	return xReturn;
 8003e36:	69fb      	ldr	r3, [r7, #28]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200007dc 	.word	0x200007dc
 8003e44:	200007f0 	.word	0x200007f0

08003e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <vTaskMissedYield+0x14>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	bf00      	nop
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	200007ec 	.word	0x200007ec

08003e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e68:	f000 f852 	bl	8003f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <prvIdleTask+0x28>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d9f9      	bls.n	8003e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <prvIdleTask+0x2c>)
 8003e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e84:	e7f0      	b.n	8003e68 <prvIdleTask+0x8>
 8003e86:	bf00      	nop
 8003e88:	200006dc 	.word	0x200006dc
 8003e8c:	e000ed04 	.word	0xe000ed04

08003e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	e00c      	b.n	8003eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <prvInitialiseTaskLists+0x60>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe fc84 	bl	80027b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d9ef      	bls.n	8003e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ebc:	480d      	ldr	r0, [pc, #52]	; (8003ef4 <prvInitialiseTaskLists+0x64>)
 8003ebe:	f7fe fc7b 	bl	80027b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ec2:	480d      	ldr	r0, [pc, #52]	; (8003ef8 <prvInitialiseTaskLists+0x68>)
 8003ec4:	f7fe fc78 	bl	80027b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ec8:	480c      	ldr	r0, [pc, #48]	; (8003efc <prvInitialiseTaskLists+0x6c>)
 8003eca:	f7fe fc75 	bl	80027b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ece:	480c      	ldr	r0, [pc, #48]	; (8003f00 <prvInitialiseTaskLists+0x70>)
 8003ed0:	f7fe fc72 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ed4:	480b      	ldr	r0, [pc, #44]	; (8003f04 <prvInitialiseTaskLists+0x74>)
 8003ed6:	f7fe fc6f 	bl	80027b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <prvInitialiseTaskLists+0x78>)
 8003edc:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <prvInitialiseTaskLists+0x64>)
 8003ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvInitialiseTaskLists+0x7c>)
 8003ee2:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <prvInitialiseTaskLists+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200006dc 	.word	0x200006dc
 8003ef4:	20000768 	.word	0x20000768
 8003ef8:	2000077c 	.word	0x2000077c
 8003efc:	20000798 	.word	0x20000798
 8003f00:	200007ac 	.word	0x200007ac
 8003f04:	200007c4 	.word	0x200007c4
 8003f08:	20000790 	.word	0x20000790
 8003f0c:	20000794 	.word	0x20000794

08003f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f16:	e019      	b.n	8003f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003f18:	f000 fe7c 	bl	8004c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f1c:	4b10      	ldr	r3, [pc, #64]	; (8003f60 <prvCheckTasksWaitingTermination+0x50>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fccf 	bl	80028cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <prvCheckTasksWaitingTermination+0x54>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3b01      	subs	r3, #1
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <prvCheckTasksWaitingTermination+0x54>)
 8003f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f42:	f000 fe97 	bl	8004c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f810 	bl	8003f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <prvCheckTasksWaitingTermination+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e1      	bne.n	8003f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200007ac 	.word	0x200007ac
 8003f64:	200007d8 	.word	0x200007d8
 8003f68:	200007c0 	.word	0x200007c0

08003f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d108      	bne.n	8003f90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f834 	bl	8004ff0 <vPortFree>
				vPortFree( pxTCB );
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 f831 	bl	8004ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f8e:	e018      	b.n	8003fc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d103      	bne.n	8003fa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f001 f828 	bl	8004ff0 <vPortFree>
	}
 8003fa0:	e00f      	b.n	8003fc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d00a      	beq.n	8003fc2 <prvDeleteTCB+0x56>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	60fb      	str	r3, [r7, #12]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <prvDeleteTCB+0x54>
	}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003fde:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fe4:	e008      	b.n	8003ff8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	4b07      	ldr	r3, [pc, #28]	; (8004004 <prvResetNextTaskUnblockTime+0x38>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <prvResetNextTaskUnblockTime+0x3c>)
 8003ff6:	6013      	str	r3, [r2, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20000790 	.word	0x20000790
 8004008:	200007f8 	.word	0x200007f8

0800400c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <xTaskGetSchedulerState+0x34>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800401a:	2301      	movs	r3, #1
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e008      	b.n	8004032 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <xTaskGetSchedulerState+0x38>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004028:	2302      	movs	r3, #2
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e001      	b.n	8004032 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800402e:	2300      	movs	r3, #0
 8004030:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004032:	687b      	ldr	r3, [r7, #4]
	}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	200007e4 	.word	0x200007e4
 8004044:	20000800 	.word	0x20000800

08004048 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d06e      	beq.n	800413c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800405e:	4b3a      	ldr	r3, [pc, #232]	; (8004148 <xTaskPriorityDisinherit+0x100>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	429a      	cmp	r2, r3
 8004066:	d00a      	beq.n	800407e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60fb      	str	r3, [r7, #12]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	60bb      	str	r3, [r7, #8]
}
 8004098:	bf00      	nop
 800409a:	e7fe      	b.n	800409a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d044      	beq.n	800413c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d140      	bne.n	800413c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fc04 	bl	80028cc <uxListRemove>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d115      	bne.n	80040f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	491f      	ldr	r1, [pc, #124]	; (800414c <xTaskPriorityDisinherit+0x104>)
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <xTaskPriorityDisinherit+0xae>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43da      	mvns	r2, r3
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4013      	ands	r3, r2
 80040f2:	4a17      	ldr	r2, [pc, #92]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 80040f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	f1c3 0207 	rsb	r2, r3, #7
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	2201      	movs	r2, #1
 8004110:	409a      	lsls	r2, r3
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <xTaskPriorityDisinherit+0x108>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <xTaskPriorityDisinherit+0x104>)
 800412a:	441a      	add	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f7fe fb6d 	bl	8002812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004138:	2301      	movs	r3, #1
 800413a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800413c:	697b      	ldr	r3, [r7, #20]
	}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200006d8 	.word	0x200006d8
 800414c:	200006dc 	.word	0x200006dc
 8004150:	200007e0 	.word	0x200007e0

08004154 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800415e:	4b29      	ldr	r3, [pc, #164]	; (8004204 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004164:	4b28      	ldr	r3, [pc, #160]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3304      	adds	r3, #4
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fbae 	bl	80028cc <uxListRemove>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2201      	movs	r2, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4013      	ands	r3, r2
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <prvAddCurrentTaskToDelayedList+0xb8>)
 800418c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d10a      	bne.n	80041ac <prvAddCurrentTaskToDelayedList+0x58>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	481a      	ldr	r0, [pc, #104]	; (8004210 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041a6:	f7fe fb34 	bl	8002812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041aa:	e026      	b.n	80041fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4413      	add	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d209      	bcs.n	80041d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fe fb42 	bl	800285a <vListInsert>
}
 80041d6:	e010      	b.n	80041fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <prvAddCurrentTaskToDelayedList+0xc4>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fe fb38 	bl	800285a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvAddCurrentTaskToDelayedList+0xc8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d202      	bcs.n	80041fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041f4:	4a09      	ldr	r2, [pc, #36]	; (800421c <prvAddCurrentTaskToDelayedList+0xc8>)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200007dc 	.word	0x200007dc
 8004208:	200006d8 	.word	0x200006d8
 800420c:	200007e0 	.word	0x200007e0
 8004210:	200007c4 	.word	0x200007c4
 8004214:	20000794 	.word	0x20000794
 8004218:	20000790 	.word	0x20000790
 800421c:	200007f8 	.word	0x200007f8

08004220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800422a:	f000 fb85 	bl	8004938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <xTimerCreateTimerTask+0x80>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d021      	beq.n	800427a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800423e:	1d3a      	adds	r2, r7, #4
 8004240:	f107 0108 	add.w	r1, r7, #8
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f95f 	bl	800050c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	9202      	str	r2, [sp, #8]
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	2302      	movs	r3, #2
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2300      	movs	r3, #0
 800425e:	460a      	mov	r2, r1
 8004260:	4910      	ldr	r1, [pc, #64]	; (80042a4 <xTimerCreateTimerTask+0x84>)
 8004262:	4811      	ldr	r0, [pc, #68]	; (80042a8 <xTimerCreateTimerTask+0x88>)
 8004264:	f7ff f8ca 	bl	80033fc <xTaskCreateStatic>
 8004268:	4603      	mov	r3, r0
 800426a:	4a10      	ldr	r2, [pc, #64]	; (80042ac <xTimerCreateTimerTask+0x8c>)
 800426c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800426e:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <xTimerCreateTimerTask+0x8c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004296:	697b      	ldr	r3, [r7, #20]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000834 	.word	0x20000834
 80042a4:	080052e8 	.word	0x080052e8
 80042a8:	08004519 	.word	0x08004519
 80042ac:	20000838 	.word	0x20000838

080042b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80042be:	2028      	movs	r0, #40	; 0x28
 80042c0:	f000 fdca 	bl	8004e58 <pvPortMalloc>
 80042c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f843 	bl	800436e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80042e8:	697b      	ldr	r3, [r7, #20]
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	; 0x28
 80042f6:	af02      	add	r7, sp, #8
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004300:	2328      	movs	r3, #40	; 0x28
 8004302:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b28      	cmp	r3, #40	; 0x28
 8004308:	d00a      	beq.n	8004320 <xTimerCreateStatic+0x2e>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	61bb      	str	r3, [r7, #24]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xTimerCreateStatic+0x4c>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	617b      	str	r3, [r7, #20]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f805 	bl	800436e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004364:	69fb      	ldr	r3, [r7, #28]
	}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	617b      	str	r3, [r7, #20]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d01e      	beq.n	80043dc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800439e:	f000 facb 	bl	8004938 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	3304      	adds	r3, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fa1a 	bl	80027f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80043dc:	bf00      	nop
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xTimerGenericCommand+0x2e>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	623b      	str	r3, [r7, #32]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <xTimerGenericCommand+0x98>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d02a      	beq.n	8004470 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b05      	cmp	r3, #5
 800442a:	dc18      	bgt.n	800445e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800442c:	f7ff fdee 	bl	800400c <xTaskGetSchedulerState>
 8004430:	4603      	mov	r3, r0
 8004432:	2b02      	cmp	r3, #2
 8004434:	d109      	bne.n	800444a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <xTimerGenericCommand+0x98>)
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f107 0114 	add.w	r1, r7, #20
 800443e:	2300      	movs	r3, #0
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	f7fe fbf3 	bl	8002c2c <xQueueGenericSend>
 8004446:	6278      	str	r0, [r7, #36]	; 0x24
 8004448:	e012      	b.n	8004470 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800444a:	4b0c      	ldr	r3, [pc, #48]	; (800447c <xTimerGenericCommand+0x98>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	f107 0114 	add.w	r1, r7, #20
 8004452:	2300      	movs	r3, #0
 8004454:	2200      	movs	r2, #0
 8004456:	f7fe fbe9 	bl	8002c2c <xQueueGenericSend>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24
 800445c:	e008      	b.n	8004470 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <xTimerGenericCommand+0x98>)
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f107 0114 	add.w	r1, r7, #20
 8004466:	2300      	movs	r3, #0
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	f7fe fcdd 	bl	8002e28 <xQueueGenericSendFromISR>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004472:	4618      	mov	r0, r3
 8004474:	3728      	adds	r7, #40	; 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000834 	.word	0x20000834

08004480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af02      	add	r7, sp, #8
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <prvProcessExpiredTimer+0x94>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe fa17 	bl	80028cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d022      	beq.n	80044f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	18d1      	adds	r1, r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	f000 f8d1 	bl	8004660 <prvInsertTimerInActiveList>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01f      	beq.n	8004504 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044c4:	2300      	movs	r3, #0
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2300      	movs	r3, #0
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	2100      	movs	r1, #0
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f7ff ff88 	bl	80043e4 <xTimerGenericCommand>
 80044d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	4798      	blx	r3
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	2000082c 	.word	0x2000082c

08004518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f857 	bl	80045d8 <prvGetNextExpireTime>
 800452a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f803 	bl	800453c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004536:	f000 f8d5 	bl	80046e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800453a:	e7f1      	b.n	8004520 <prvTimerTask+0x8>

0800453c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004546:	f7ff f987 	bl	8003858 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f866 	bl	8004620 <prvSampleTimeNow>
 8004554:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d130      	bne.n	80045be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <prvProcessTimerOrBlockTask+0x3c>
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	429a      	cmp	r2, r3
 8004568:	d806      	bhi.n	8004578 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800456a:	f7ff f983 	bl	8003874 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ff85 	bl	8004480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004576:	e024      	b.n	80045c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d008      	beq.n	8004590 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <prvProcessTimerOrBlockTask+0x90>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <prvProcessTimerOrBlockTask+0x50>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <prvProcessTimerOrBlockTask+0x52>
 800458c:	2300      	movs	r3, #0
 800458e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <prvProcessTimerOrBlockTask+0x94>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	f7fe fef9 	bl	8003394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045a2:	f7ff f967 	bl	8003874 <xTaskResumeAll>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045ac:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <prvProcessTimerOrBlockTask+0x98>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
}
 80045bc:	e001      	b.n	80045c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045be:	f7ff f959 	bl	8003874 <xTaskResumeAll>
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000830 	.word	0x20000830
 80045d0:	20000834 	.word	0x20000834
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <prvGetNextExpireTime+0x44>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <prvGetNextExpireTime+0x16>
 80045ea:	2201      	movs	r2, #1
 80045ec:	e000      	b.n	80045f0 <prvGetNextExpireTime+0x18>
 80045ee:	2200      	movs	r2, #0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <prvGetNextExpireTime+0x44>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	e001      	b.n	800460c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	2000082c 	.word	0x2000082c

08004620 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004628:	f7ff f9c0 	bl	80039ac <xTaskGetTickCount>
 800462c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <prvSampleTimeNow+0x3c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	429a      	cmp	r2, r3
 8004636:	d205      	bcs.n	8004644 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004638:	f000 f91a 	bl	8004870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e002      	b.n	800464a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <prvSampleTimeNow+0x3c>)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000083c 	.word	0x2000083c

08004660 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d812      	bhi.n	80046ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	1ad2      	subs	r2, r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004694:	2301      	movs	r3, #1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e01b      	b.n	80046d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <prvInsertTimerInActiveList+0x7c>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f7fe f8d8 	bl	800285a <vListInsert>
 80046aa:	e012      	b.n	80046d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d206      	bcs.n	80046c2 <prvInsertTimerInActiveList+0x62>
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e007      	b.n	80046d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <prvInsertTimerInActiveList+0x80>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fe f8c4 	bl	800285a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046d2:	697b      	ldr	r3, [r7, #20]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000830 	.word	0x20000830
 80046e0:	2000082c 	.word	0x2000082c

080046e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	; 0x30
 80046e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046ea:	e0ae      	b.n	800484a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f2c0 80aa 	blt.w	8004848 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	3304      	adds	r3, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe f8e1 	bl	80028cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff87 	bl	8004620 <prvSampleTimeNow>
 8004712:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b09      	cmp	r3, #9
 8004718:	f200 8097 	bhi.w	800484a <prvProcessReceivedCommands+0x166>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <prvProcessReceivedCommands+0x40>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	0800474d 	.word	0x0800474d
 8004728:	0800474d 	.word	0x0800474d
 800472c:	0800474d 	.word	0x0800474d
 8004730:	080047c1 	.word	0x080047c1
 8004734:	080047d5 	.word	0x080047d5
 8004738:	0800481f 	.word	0x0800481f
 800473c:	0800474d 	.word	0x0800474d
 8004740:	0800474d 	.word	0x0800474d
 8004744:	080047c1 	.word	0x080047c1
 8004748:	080047d5 	.word	0x080047d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	18d1      	adds	r1, r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a3a      	ldr	r2, [r7, #32]
 800476a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800476c:	f7ff ff78 	bl	8004660 <prvInsertTimerInActiveList>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d069      	beq.n	800484a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800477c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05e      	beq.n	800484a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	441a      	add	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2300      	movs	r3, #0
 800479a:	2100      	movs	r1, #0
 800479c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479e:	f7ff fe21 	bl	80043e4 <xTimerGenericCommand>
 80047a2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d14f      	bne.n	800484a <prvProcessReceivedCommands+0x166>
	__asm volatile
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	61bb      	str	r3, [r7, #24]
}
 80047bc:	bf00      	nop
 80047be:	e7fe      	b.n	80047be <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80047d2:	e03a      	b.n	800484a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047da:	f043 0301 	orr.w	r3, r3, #1
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10a      	bne.n	800480a <prvProcessReceivedCommands+0x126>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	617b      	str	r3, [r7, #20]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	18d1      	adds	r1, r2, r3
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004818:	f7ff ff22 	bl	8004660 <prvInsertTimerInActiveList>
					break;
 800481c:	e015      	b.n	800484a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800482c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800482e:	f000 fbdf 	bl	8004ff0 <vPortFree>
 8004832:	e00a      	b.n	800484a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004846:	e000      	b.n	800484a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <prvProcessReceivedCommands+0x188>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f107 0108 	add.w	r1, r7, #8
 8004852:	2200      	movs	r2, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fb83 	bl	8002f60 <xQueueReceive>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	f47f af45 	bne.w	80046ec <prvProcessReceivedCommands+0x8>
	}
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	3728      	adds	r7, #40	; 0x28
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000834 	.word	0x20000834

08004870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004876:	e048      	b.n	800490a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004878:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <prvSwitchTimerLists+0xc0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <prvSwitchTimerLists+0xc0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe f81b 	bl	80028cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02e      	beq.n	800490a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4413      	add	r3, r2
 80048b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d90e      	bls.n	80048dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048ca:	4b19      	ldr	r3, [pc, #100]	; (8004930 <prvSwitchTimerLists+0xc0>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fd ffc0 	bl	800285a <vListInsert>
 80048da:	e016      	b.n	800490a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048dc:	2300      	movs	r3, #0
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2300      	movs	r3, #0
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	2100      	movs	r1, #0
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fd7c 	bl	80043e4 <xTimerGenericCommand>
 80048ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	603b      	str	r3, [r7, #0]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <prvSwitchTimerLists+0xc0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1b1      	bne.n	8004878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <prvSwitchTimerLists+0xc0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <prvSwitchTimerLists+0xc4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a04      	ldr	r2, [pc, #16]	; (8004930 <prvSwitchTimerLists+0xc0>)
 8004920:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004922:	4a04      	ldr	r2, [pc, #16]	; (8004934 <prvSwitchTimerLists+0xc4>)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2000082c 	.word	0x2000082c
 8004934:	20000830 	.word	0x20000830

08004938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800493e:	f000 f969 	bl	8004c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <prvCheckForValidListAndQueue+0x60>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d120      	bne.n	800498c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800494a:	4814      	ldr	r0, [pc, #80]	; (800499c <prvCheckForValidListAndQueue+0x64>)
 800494c:	f7fd ff34 	bl	80027b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004950:	4813      	ldr	r0, [pc, #76]	; (80049a0 <prvCheckForValidListAndQueue+0x68>)
 8004952:	f7fd ff31 	bl	80027b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <prvCheckForValidListAndQueue+0x6c>)
 8004958:	4a10      	ldr	r2, [pc, #64]	; (800499c <prvCheckForValidListAndQueue+0x64>)
 800495a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800495c:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <prvCheckForValidListAndQueue+0x70>)
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <prvCheckForValidListAndQueue+0x68>)
 8004960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004962:	2300      	movs	r3, #0
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	4b11      	ldr	r3, [pc, #68]	; (80049ac <prvCheckForValidListAndQueue+0x74>)
 8004968:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <prvCheckForValidListAndQueue+0x78>)
 800496a:	210c      	movs	r1, #12
 800496c:	200a      	movs	r0, #10
 800496e:	f7fe f83f 	bl	80029f0 <xQueueGenericCreateStatic>
 8004972:	4603      	mov	r3, r0
 8004974:	4a08      	ldr	r2, [pc, #32]	; (8004998 <prvCheckForValidListAndQueue+0x60>)
 8004976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvCheckForValidListAndQueue+0x60>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <prvCheckForValidListAndQueue+0x60>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	490b      	ldr	r1, [pc, #44]	; (80049b4 <prvCheckForValidListAndQueue+0x7c>)
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe fcda 	bl	8003340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800498c:	f000 f972 	bl	8004c74 <vPortExitCritical>
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000834 	.word	0x20000834
 800499c:	20000804 	.word	0x20000804
 80049a0:	20000818 	.word	0x20000818
 80049a4:	2000082c 	.word	0x2000082c
 80049a8:	20000830 	.word	0x20000830
 80049ac:	200008b8 	.word	0x200008b8
 80049b0:	20000840 	.word	0x20000840
 80049b4:	080052f0 	.word	0x080052f0

080049b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3b04      	subs	r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b04      	subs	r3, #4
 80049d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b04      	subs	r3, #4
 80049e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <pxPortInitialiseStack+0x64>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b14      	subs	r3, #20
 80049f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b04      	subs	r3, #4
 80049fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f06f 0202 	mvn.w	r2, #2
 8004a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b20      	subs	r3, #32
 8004a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	08004a21 	.word	0x08004a21

08004a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <prvTaskExitError+0x54>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d00a      	beq.n	8004a4a <prvTaskExitError+0x2a>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	60fb      	str	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <prvTaskExitError+0x28>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	60bb      	str	r3, [r7, #8]
}
 8004a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a5e:	bf00      	nop
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0fc      	beq.n	8004a60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000010 	.word	0x20000010
	...

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10a      	bne.n	8004af6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <xPortStartScheduler+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10a      	bne.n	8004b16 <xPortStartScheduler+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <xPortStartScheduler+0x12c>)
 8004b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <xPortStartScheduler+0x130>)
 8004b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b44:	e009      	b.n	8004b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d0ef      	beq.n	8004b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00a      	beq.n	8004b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bbe:	f000 f8dd 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <xPortStartScheduler+0x13c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bc8:	f000 f8fc 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd8:	f7ff ff66 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bdc:	f7fe ffae 	bl	8003b3c <vTaskSwitchContext>
	prvTaskExitError();
 8004be0:	f7ff ff1e 	bl	8004a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00
 8004bf4:	410fc271 	.word	0x410fc271
 8004bf8:	410fc270 	.word	0x410fc270
 8004bfc:	e000e400 	.word	0xe000e400
 8004c00:	20000900 	.word	0x20000900
 8004c04:	20000904 	.word	0x20000904
 8004c08:	e000ed20 	.word	0xe000ed20
 8004c0c:	20000010 	.word	0x20000010
 8004c10:	e000ef34 	.word	0xe000ef34

08004c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10f      	bne.n	8004c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	603b      	str	r3, [r7, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x4a>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000010 	.word	0x20000010
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortExitCritical+0x24>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <vPortExitCritical+0x42>
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
}
 8004cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000010 	.word	0x20000010
	...

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7fe ff1c 	bl	8003b3c <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7fe fe3b 	bl	80039cc <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <SysTick_Handler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000004 	.word	0x20000004
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b0f      	cmp	r3, #15
 8004de8:	d914      	bls.n	8004e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dea:	4a17      	ldr	r2, [pc, #92]	; (8004e48 <vPortValidateInterruptPriority+0x70>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004df4:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <vPortValidateInterruptPriority+0x74>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	7afa      	ldrb	r2, [r7, #11]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d20a      	bcs.n	8004e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <vPortValidateInterruptPriority+0x78>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <vPortValidateInterruptPriority+0x7c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d90a      	bls.n	8004e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	603b      	str	r3, [r7, #0]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <vPortValidateInterruptPriority+0x60>
	}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000e3f0 	.word	0xe000e3f0
 8004e4c:	20000900 	.word	0x20000900
 8004e50:	e000ed0c 	.word	0xe000ed0c
 8004e54:	20000904 	.word	0x20000904

08004e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e64:	f7fe fcf8 	bl	8003858 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e68:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <pvPortMalloc+0x180>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e70:	f000 f920 	bl	80050b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e74:	4b59      	ldr	r3, [pc, #356]	; (8004fdc <pvPortMalloc+0x184>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8093 	bne.w	8004fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01d      	beq.n	8004ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e88:	2208      	movs	r2, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f023 0307 	bic.w	r3, r3, #7
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d06e      	beq.n	8004fa8 <pvPortMalloc+0x150>
 8004eca:	4b45      	ldr	r3, [pc, #276]	; (8004fe0 <pvPortMalloc+0x188>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d869      	bhi.n	8004fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <pvPortMalloc+0x18c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ede:	e004      	b.n	8004eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d903      	bls.n	8004efc <pvPortMalloc+0xa4>
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f1      	bne.n	8004ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <pvPortMalloc+0x180>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d050      	beq.n	8004fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4413      	add	r3, r2
 8004f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	2308      	movs	r3, #8
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d91f      	bls.n	8004f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <pvPortMalloc+0xf8>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	613b      	str	r3, [r7, #16]
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f62:	69b8      	ldr	r0, [r7, #24]
 8004f64:	f000 f908 	bl	8005178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f68:	4b1d      	ldr	r3, [pc, #116]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d203      	bcs.n	8004f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f82:	4b17      	ldr	r3, [pc, #92]	; (8004fe0 <pvPortMalloc+0x188>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <pvPortMalloc+0x190>)
 8004f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <pvPortMalloc+0x184>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <pvPortMalloc+0x194>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <pvPortMalloc+0x194>)
 8004fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fa8:	f7fe fc64 	bl	8003874 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <pvPortMalloc+0x174>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <pvPortMalloc+0x172>
	return pvReturn;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20004510 	.word	0x20004510
 8004fdc:	20004524 	.word	0x20004524
 8004fe0:	20004514 	.word	0x20004514
 8004fe4:	20004508 	.word	0x20004508
 8004fe8:	20004518 	.word	0x20004518
 8004fec:	2000451c 	.word	0x2000451c

08004ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d04d      	beq.n	800509e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005002:	2308      	movs	r3, #8
 8005004:	425b      	negs	r3, r3
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4413      	add	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <vPortFree+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <vPortFree+0x44>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <vPortFree+0x62>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	60bb      	str	r3, [r7, #8]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <vPortFree+0xb8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d11a      	bne.n	800509e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <vPortFree+0xb8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005078:	f7fe fbee 	bl	8003858 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <vPortFree+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4413      	add	r3, r2
 8005086:	4a09      	ldr	r2, [pc, #36]	; (80050ac <vPortFree+0xbc>)
 8005088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f000 f874 	bl	8005178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005090:	4b07      	ldr	r3, [pc, #28]	; (80050b0 <vPortFree+0xc0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <vPortFree+0xc0>)
 8005098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800509a:	f7fe fbeb 	bl	8003874 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20004524 	.word	0x20004524
 80050ac:	20004514 	.word	0x20004514
 80050b0:	20004520 	.word	0x20004520

080050b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <prvHeapInit+0xac>)
 80050c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3307      	adds	r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0307 	bic.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <prvHeapInit+0xac>)
 80050e4:	4413      	add	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <prvHeapInit+0xb0>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050f2:	4b1c      	ldr	r3, [pc, #112]	; (8005164 <prvHeapInit+0xb0>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005100:	2208      	movs	r2, #8
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4a15      	ldr	r2, [pc, #84]	; (8005168 <prvHeapInit+0xb4>)
 8005114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <prvHeapInit+0xb4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <prvHeapInit+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005134:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <prvHeapInit+0xb4>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <prvHeapInit+0xb8>)
 8005142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a09      	ldr	r2, [pc, #36]	; (8005170 <prvHeapInit+0xbc>)
 800514a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <prvHeapInit+0xc0>)
 800514e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000908 	.word	0x20000908
 8005164:	20004508 	.word	0x20004508
 8005168:	20004510 	.word	0x20004510
 800516c:	20004518 	.word	0x20004518
 8005170:	20004514 	.word	0x20004514
 8005174:	20004524 	.word	0x20004524

08005178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005180:	4b28      	ldr	r3, [pc, #160]	; (8005224 <prvInsertBlockIntoFreeList+0xac>)
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	e002      	b.n	800518c <prvInsertBlockIntoFreeList+0x14>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	d8f7      	bhi.n	8005186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d108      	bne.n	80051ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d118      	bne.n	8005200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d00d      	beq.n	80051f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e008      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051f6:	4b0c      	ldr	r3, [pc, #48]	; (8005228 <prvInsertBlockIntoFreeList+0xb0>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e003      	b.n	8005208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d002      	beq.n	8005216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20004508 	.word	0x20004508
 8005228:	20004510 	.word	0x20004510

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	4d0d      	ldr	r5, [pc, #52]	; (8005264 <__libc_init_array+0x38>)
 8005230:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005232:	1b64      	subs	r4, r4, r5
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	2600      	movs	r6, #0
 8005238:	42a6      	cmp	r6, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	4d0b      	ldr	r5, [pc, #44]	; (800526c <__libc_init_array+0x40>)
 800523e:	4c0c      	ldr	r4, [pc, #48]	; (8005270 <__libc_init_array+0x44>)
 8005240:	f000 f82e 	bl	80052a0 <_init>
 8005244:	1b64      	subs	r4, r4, r5
 8005246:	10a4      	asrs	r4, r4, #2
 8005248:	2600      	movs	r6, #0
 800524a:	42a6      	cmp	r6, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	f855 3b04 	ldr.w	r3, [r5], #4
 8005254:	4798      	blx	r3
 8005256:	3601      	adds	r6, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	f855 3b04 	ldr.w	r3, [r5], #4
 800525e:	4798      	blx	r3
 8005260:	3601      	adds	r6, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	08005318 	.word	0x08005318
 8005268:	08005318 	.word	0x08005318
 800526c:	08005318 	.word	0x08005318
 8005270:	0800531c 	.word	0x0800531c

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528a:	4291      	cmp	r1, r2
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <memset>:
 8005290:	4402      	add	r2, r0
 8005292:	4603      	mov	r3, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <_init>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr

080052ac <_fini>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr
