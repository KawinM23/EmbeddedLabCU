
Lab6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002898  08002898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b0  080028b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028b0  080028b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028b8  080028b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080028cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080028cc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097b5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001521  00000000  00000000  000297f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0002ad18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b3d  00000000  00000000  0002bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000924c  00000000  00000000  000407bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082893  00000000  00000000  00049a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc29c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000cc2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002880 	.word	0x08002880

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002880 	.word	0x08002880

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d2:	f000 faa3 	bl	8000a1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004d6:	f000 f825 	bl	8000524 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004da:	f000 f8ed 	bl	80006b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004de:	f000 f8c1 	bl	8000664 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80004e2:	f000 f88b 	bl	80005fc <MX_SPI2_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		if (HAL_SPI_Receive(&hspi2, receivedData, sizeof(receivedData), HAL_MAX_DELAY) == HAL_OK) {
 80004e6:	1d39      	adds	r1, r7, #4
 80004e8:	f04f 33ff 	mov.w	r3, #4294967295
 80004ec:	2201      	movs	r2, #1
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x4c>)
 80004f0:	f001 faa1 	bl	8001a36 <HAL_SPI_Receive>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f5      	bne.n	80004e6 <main+0x1a>
			if (receivedData[0] == '0') {
 80004fa:	793b      	ldrb	r3, [r7, #4]
 80004fc:	2b30      	cmp	r3, #48	; 0x30
 80004fe:	d103      	bne.n	8000508 <main+0x3c>
				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000500:	2120      	movs	r1, #32
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x50>)
 8000504:	f000 fd7f 	bl	8001006 <HAL_GPIO_TogglePin>
				//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
			} else if (receivedData[0] == '1') {
				//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
			}

			HAL_UART_Transmit(&huart2, receivedData, sizeof(receivedData), 100);
 8000508:	1d39      	adds	r1, r7, #4
 800050a:	2364      	movs	r3, #100	; 0x64
 800050c:	2201      	movs	r2, #1
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <main+0x54>)
 8000510:	f001 fec1 	bl	8002296 <HAL_UART_Transmit>
		if (HAL_SPI_Receive(&hspi2, receivedData, sizeof(receivedData), HAL_MAX_DELAY) == HAL_OK) {
 8000514:	e7e7      	b.n	80004e6 <main+0x1a>
 8000516:	bf00      	nop
 8000518:	20000028 	.word	0x20000028
 800051c:	40020000 	.word	0x40020000
 8000520:	20000080 	.word	0x20000080

08000524 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 f99c 	bl	8002870 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000598:	2310      	movs	r3, #16
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fd44 	bl	800103c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
		Error_Handler();
 80005ba:	f000 f8eb 	bl	8000794 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ffa6 	bl	800152c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
		Error_Handler();
 80005e6:	f000 f8d5 	bl	8000794 <Error_Handler>
	}
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_SPI2_Init+0x60>)
 8000602:	4a17      	ldr	r2, [pc, #92]	; (8000660 <MX_SPI2_Init+0x64>)
 8000604:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_SPI2_Init+0x60>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_SPI2_Init+0x60>)
 800060e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000612:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_SPI2_Init+0x60>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <MX_SPI2_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_SPI2_Init+0x60>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_SPI2_Init+0x60>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_SPI2_Init+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_SPI2_Init+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MX_SPI2_Init+0x60>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_SPI2_Init+0x60>)
 8000642:	220a      	movs	r2, #10
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_SPI2_Init+0x60>)
 8000648:	f001 f96c 	bl	8001924 <HAL_SPI_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_SPI2_Init+0x5a>
		Error_Handler();
 8000652:	f000 f89f 	bl	8000794 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028
 8000660:	40003800 	.word	0x40003800

08000664 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fdae 	bl	80021fc <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006a6:	f000 f875 	bl	8000794 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000080 	.word	0x20000080
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b2a      	ldr	r3, [pc, #168]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0xd0>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd4>)
 8000744:	f000 fc46 	bl	8000fd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000752:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xd8>)
 8000760:	f000 fab4 	bl	8000ccc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000764:	2320      	movs	r3, #32
 8000766:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd4>)
 800077c:	f000 faa6 	bl	8000ccc <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020800 	.word	0x40020800

08000794 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007de:	2007      	movs	r0, #7
 80007e0:	f000 fa40 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <HAL_SPI_MspInit+0xc0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d14a      	bne.n	80008a8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_SPI_MspInit+0xc4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000866:	2308      	movs	r3, #8
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <HAL_SPI_MspInit+0xc8>)
 8000882:	f000 fa23 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000898:	2305      	movs	r3, #5
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_SPI_MspInit+0xcc>)
 80008a4:	f000 fa12 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40003800 	.word	0x40003800
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020400 	.word	0x40020400

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12b      	bne.n	800093a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000936:	f000 f9c9 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f890 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ce:	490e      	ldr	r1, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009f2:	f7ff ffd7 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f001 ff17 	bl	8002828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd67 	bl	80004cc <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a0c:	080028c0 	.word	0x080028c0
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a14:	200000c8 	.word	0x200000c8

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f90d 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fea6 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f917 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f8ed 	bl	8000c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	200000c4 	.word	0x200000c4

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000c4 	.word	0x200000c4

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff47 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff5c 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff8e 	bl	8000bb8 <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffb0 	bl	8000c20 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	e159      	b.n	8000f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f040 8148 	bne.w	8000f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d005      	beq.n	8000d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d130      	bne.n	8000d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	2203      	movs	r2, #3
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d54:	2201      	movs	r2, #1
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	f003 0201 	and.w	r2, r3, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d017      	beq.n	8000dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d123      	bne.n	8000e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	69b9      	ldr	r1, [r7, #24]
 8000e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0203 	and.w	r2, r3, #3
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a2 	beq.w	8000f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <HAL_GPIO_Init+0x2e8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6e:	4a52      	ldr	r2, [pc, #328]	; (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_GPIO_Init+0x2f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x202>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2f4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x1fe>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a47      	ldr	r2, [pc, #284]	; (8000fc4 <HAL_GPIO_Init+0x2f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x1fa>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a46      	ldr	r2, [pc, #280]	; (8000fc8 <HAL_GPIO_Init+0x2fc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x1f6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_GPIO_Init+0x300>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x1f2>
 8000eba:	2304      	movs	r3, #4
 8000ebc:	e008      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x204>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee0:	4935      	ldr	r1, [pc, #212]	; (8000fb8 <HAL_GPIO_Init+0x2ec>)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f42:	4b23      	ldr	r3, [pc, #140]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f66:	4a1a      	ldr	r2, [pc, #104]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_GPIO_Init+0x304>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	f67f aea2 	bls.w	8000ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40013c00 	.word	0x40013c00

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001018:	887a      	ldrh	r2, [r7, #2]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4013      	ands	r3, r2
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43d9      	mvns	r1, r3
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	400b      	ands	r3, r1
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e264      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d075      	beq.n	8001146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105a:	4ba3      	ldr	r3, [pc, #652]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b04      	cmp	r3, #4
 8001064:	d00c      	beq.n	8001080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800106e:	2b08      	cmp	r3, #8
 8001070:	d112      	bne.n	8001098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800107e:	d10b      	bne.n	8001098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	4b99      	ldr	r3, [pc, #612]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d05b      	beq.n	8001144 <HAL_RCC_OscConfig+0x108>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d157      	bne.n	8001144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e23f      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x74>
 80010a2:	4b91      	ldr	r3, [pc, #580]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a90      	ldr	r2, [pc, #576]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0xb0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x98>
 80010ba:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a8a      	ldr	r2, [pc, #552]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a87      	ldr	r2, [pc, #540]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0xb0>
 80010d4:	4b84      	ldr	r3, [pc, #528]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a83      	ldr	r2, [pc, #524]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a80      	ldr	r2, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcf8 	bl	8000ae8 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fcf4 	bl	8000ae8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e204      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0xc0>
 800111a:	e014      	b.n	8001146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fce4 	bl	8000ae8 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fce0 	bl	8000ae8 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1f0      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001136:	4b6c      	ldr	r3, [pc, #432]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0xe8>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d063      	beq.n	800121a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001166:	2b08      	cmp	r3, #8
 8001168:	d11c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116a:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d116      	bne.n	80011a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x152>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e1c4      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4952      	ldr	r1, [pc, #328]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	e03a      	b.n	800121a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d020      	beq.n	80011ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <HAL_RCC_OscConfig+0x2b0>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc99 	bl	8000ae8 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc95 	bl	8000ae8 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e1a5      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d8:	4b43      	ldr	r3, [pc, #268]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4940      	ldr	r1, [pc, #256]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_OscConfig+0x2b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc78 	bl	8000ae8 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fc:	f7ff fc74 	bl	8000ae8 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e184      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d030      	beq.n	8001288 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d016      	beq.n	800125c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_RCC_OscConfig+0x2b4>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff fc58 	bl	8000ae8 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fc54 	bl	8000ae8 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e164      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x200>
 800125a:	e015      	b.n	8001288 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_RCC_OscConfig+0x2b4>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fc41 	bl	8000ae8 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126a:	f7ff fc3d 	bl	8000ae8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e14d      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f0      	bne.n	800126a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a0 	beq.w	80013d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d121      	bne.n	8001316 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_RCC_OscConfig+0x2b8>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fc03 	bl	8000ae8 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e011      	b.n	800130a <HAL_RCC_OscConfig+0x2ce>
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	42470000 	.word	0x42470000
 80012f0:	42470e80 	.word	0x42470e80
 80012f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f8:	f7ff fbf6 	bl	8000ae8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e106      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b85      	ldr	r3, [pc, #532]	; (8001520 <HAL_RCC_OscConfig+0x4e4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x2f0>
 800131e:	4b81      	ldr	r3, [pc, #516]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001322:	4a80      	ldr	r2, [pc, #512]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6713      	str	r3, [r2, #112]	; 0x70
 800132a:	e01c      	b.n	8001366 <HAL_RCC_OscConfig+0x32a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d10c      	bne.n	800134e <HAL_RCC_OscConfig+0x312>
 8001334:	4b7b      	ldr	r3, [pc, #492]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	4a7a      	ldr	r2, [pc, #488]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6713      	str	r3, [r2, #112]	; 0x70
 8001340:	4b78      	ldr	r3, [pc, #480]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	4a77      	ldr	r2, [pc, #476]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6713      	str	r3, [r2, #112]	; 0x70
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x32a>
 800134e:	4b75      	ldr	r3, [pc, #468]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001352:	4a74      	ldr	r2, [pc, #464]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6713      	str	r3, [r2, #112]	; 0x70
 800135a:	4b72      	ldr	r3, [pc, #456]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135e:	4a71      	ldr	r2, [pc, #452]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001360:	f023 0304 	bic.w	r3, r3, #4
 8001364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fbbb 	bl	8000ae8 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001376:	f7ff fbb7 	bl	8000ae8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f241 3288 	movw	r2, #5000	; 0x1388
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0c5      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	4b65      	ldr	r3, [pc, #404]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800138e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0ee      	beq.n	8001376 <HAL_RCC_OscConfig+0x33a>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fba5 	bl	8000ae8 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	e00a      	b.n	80013b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff fba1 	bl	8000ae8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e0af      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ee      	bne.n	80013a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ca:	4b56      	ldr	r3, [pc, #344]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 809b 	beq.w	8001516 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e0:	4b50      	ldr	r3, [pc, #320]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d05c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d141      	bne.n	8001478 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb75 	bl	8000ae8 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fb71 	bl	8000ae8 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e081      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	4b43      	ldr	r3, [pc, #268]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	3b01      	subs	r3, #1
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	4937      	ldr	r1, [pc, #220]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144a:	4b37      	ldr	r3, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fb4a 	bl	8000ae8 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff fb46 	bl	8000ae8 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e056      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x41c>
 8001476:	e04e      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x4ec>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb33 	bl	8000ae8 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb2f 	bl	8000ae8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e03f      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x44a>
 80014a4:	e037      	b.n	8001516 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e032      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d028      	beq.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d11a      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014e2:	4013      	ands	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d111      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d107      	bne.n	8001512 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40007000 	.word	0x40007000
 8001524:	40023800 	.word	0x40023800
 8001528:	42470060 	.word	0x42470060

0800152c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e0cc      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d90c      	bls.n	8001568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154e:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800158a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d044      	beq.n	800164c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d119      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e06f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e067      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f023 0203 	bic.w	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4934      	ldr	r1, [pc, #208]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	4313      	orrs	r3, r2
 800161a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff fa64 	bl	8000ae8 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	e00a      	b.n	800163a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001624:	f7ff fa60 	bl	8000ae8 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e04f      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 020c 	and.w	r2, r3, #12
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1eb      	bne.n	8001624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20c      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f821 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x1c0>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f9c4 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00
 80016e8:	40023800 	.word	0x40023800
 80016ec:	08002898 	.word	0x08002898
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	2300      	movs	r3, #0
 800170a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001710:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d00d      	beq.n	8001738 <HAL_RCC_GetSysClockFreq+0x40>
 800171c:	2b08      	cmp	r3, #8
 800171e:	f200 80bd 	bhi.w	800189c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x34>
 8001726:	2b04      	cmp	r3, #4
 8001728:	d003      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x3a>
 800172a:	e0b7      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4b61      	ldr	r3, [pc, #388]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800172e:	60bb      	str	r3, [r7, #8]
       break;
 8001730:	e0b7      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001732:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001734:	60bb      	str	r3, [r7, #8]
      break;
 8001736:	e0b4      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001738:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04d      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	461a      	mov	r2, r3
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800175e:	f04f 0100 	mov.w	r1, #0
 8001762:	ea02 0800 	and.w	r8, r2, r0
 8001766:	ea03 0901 	and.w	r9, r3, r1
 800176a:	4640      	mov	r0, r8
 800176c:	4649      	mov	r1, r9
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	014b      	lsls	r3, r1, #5
 8001778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800177c:	0142      	lsls	r2, r0, #5
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	ebb0 0008 	subs.w	r0, r0, r8
 8001786:	eb61 0109 	sbc.w	r1, r1, r9
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001798:	0182      	lsls	r2, r0, #6
 800179a:	1a12      	subs	r2, r2, r0
 800179c:	eb63 0301 	sbc.w	r3, r3, r1
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	00d9      	lsls	r1, r3, #3
 80017aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017ae:	00d0      	lsls	r0, r2, #3
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	eb12 0208 	adds.w	r2, r2, r8
 80017b8:	eb43 0309 	adc.w	r3, r3, r9
 80017bc:	f04f 0000 	mov.w	r0, #0
 80017c0:	f04f 0100 	mov.w	r1, #0
 80017c4:	0259      	lsls	r1, r3, #9
 80017c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017ca:	0250      	lsls	r0, r2, #9
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	f7fe fcfa 	bl	80001d4 <__aeabi_uldivmod>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4613      	mov	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e04a      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	461a      	mov	r2, r3
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	ea02 0400 	and.w	r4, r2, r0
 8001802:	ea03 0501 	and.w	r5, r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	014b      	lsls	r3, r1, #5
 8001814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001818:	0142      	lsls	r2, r0, #5
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	1b00      	subs	r0, r0, r4
 8001820:	eb61 0105 	sbc.w	r1, r1, r5
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	018b      	lsls	r3, r1, #6
 800182e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001832:	0182      	lsls	r2, r0, #6
 8001834:	1a12      	subs	r2, r2, r0
 8001836:	eb63 0301 	sbc.w	r3, r3, r1
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	00d9      	lsls	r1, r3, #3
 8001844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001848:	00d0      	lsls	r0, r2, #3
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	1912      	adds	r2, r2, r4
 8001850:	eb45 0303 	adc.w	r3, r5, r3
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0299      	lsls	r1, r3, #10
 800185e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001862:	0290      	lsls	r0, r2, #10
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	461a      	mov	r2, r3
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f7fe fcae 	bl	80001d4 <__aeabi_uldivmod>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4613      	mov	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	3301      	adds	r3, #1
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	60bb      	str	r3, [r7, #8]
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800189e:	60bb      	str	r3, [r7, #8]
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	68bb      	ldr	r3, [r7, #8]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d8:	f7ff fff0 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018dc:	4602      	mov	r2, r0
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	4903      	ldr	r1, [pc, #12]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ea:	5ccb      	ldrb	r3, [r1, r3]
 80018ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	080028a8 	.word	0x080028a8

080018fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001900:	f7ff ffdc 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001904:	4602      	mov	r2, r0
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0b5b      	lsrs	r3, r3, #13
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	4903      	ldr	r1, [pc, #12]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001912:	5ccb      	ldrb	r3, [r1, r3]
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001918:	4618      	mov	r0, r3
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	080028a8 	.word	0x080028a8

08001924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e07b      	b.n	8001a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001946:	d009      	beq.n	800195c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
 800194e:	e005      	b.n	800195c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7fe ff3a 	bl	80007f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e0:	ea42 0103 	orr.w	r1, r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	f003 0104 	and.w	r1, r3, #4
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f003 0210 	and.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b088      	sub	sp, #32
 8001a3a:	af02      	add	r7, sp, #8
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a52:	d112      	bne.n	8001a7a <HAL_SPI_Receive+0x44>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10e      	bne.n	8001a7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f8f1 	bl	8001c58 <HAL_SPI_TransmitReceive>
 8001a76:	4603      	mov	r3, r0
 8001a78:	e0ea      	b.n	8001c50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_SPI_Receive+0x52>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e0e3      	b.n	8001c50 <HAL_SPI_Receive+0x21a>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a90:	f7ff f82a 	bl	8000ae8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d002      	beq.n	8001aa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001aa6:	e0ca      	b.n	8001c3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_SPI_Receive+0x7e>
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ab8:	e0c1      	b.n	8001c3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2204      	movs	r2, #4
 8001abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	88fa      	ldrh	r2, [r7, #6]
 8001ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b00:	d10f      	bne.n	8001b22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d007      	beq.n	8001b40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d162      	bne.n	8001c0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001b48:	e02e      	b.n	8001ba8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d115      	bne.n	8001b84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f103 020c 	add.w	r2, r3, #12
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b82:	e011      	b.n	8001ba8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b84:	f7fe ffb0 	bl	8000ae8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d803      	bhi.n	8001b9c <HAL_SPI_Receive+0x166>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9a:	d102      	bne.n	8001ba2 <HAL_SPI_Receive+0x16c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ba6:	e04a      	b.n	8001c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1cb      	bne.n	8001b4a <HAL_SPI_Receive+0x114>
 8001bb2:	e031      	b.n	8001c18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d113      	bne.n	8001bea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001be8:	e011      	b.n	8001c0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bea:	f7fe ff7d 	bl	8000ae8 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d803      	bhi.n	8001c02 <HAL_SPI_Receive+0x1cc>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d102      	bne.n	8001c08 <HAL_SPI_Receive+0x1d2>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c0c:	e017      	b.n	8001c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1cd      	bne.n	8001bb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 fa45 	bl	80020ac <SPI_EndRxTransaction>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
 8001c3a:	e000      	b.n	8001c3e <HAL_SPI_Receive+0x208>
  }

error :
 8001c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_SPI_TransmitReceive+0x26>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e18a      	b.n	8001f94 <HAL_SPI_TransmitReceive+0x33c>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c86:	f7fe ff2f 	bl	8000ae8 <HAL_GetTick>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d00f      	beq.n	8001cc8 <HAL_SPI_TransmitReceive+0x70>
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cae:	d107      	bne.n	8001cc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d103      	bne.n	8001cc0 <HAL_SPI_TransmitReceive+0x68>
 8001cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d003      	beq.n	8001cc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001cc6:	e15b      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x82>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x82>
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d103      	bne.n	8001ce2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ce0:	e14e      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d003      	beq.n	8001cf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d007      	beq.n	8001d4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d52:	d178      	bne.n	8001e46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_TransmitReceive+0x10a>
 8001d5c:	8b7b      	ldrh	r3, [r7, #26]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d166      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	881a      	ldrh	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	1c9a      	adds	r2, r3, #2
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d86:	e053      	b.n	8001e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d11b      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x176>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d016      	beq.n	8001dce <HAL_SPI_TransmitReceive+0x176>
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d113      	bne.n	8001dce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	1c9a      	adds	r2, r3, #2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d119      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x1b8>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d014      	beq.n	8001e10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df0:	b292      	uxth	r2, r2
 8001df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	1c9a      	adds	r2, r3, #2
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e10:	f7fe fe6a 	bl	8000ae8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d807      	bhi.n	8001e30 <HAL_SPI_TransmitReceive+0x1d8>
 8001e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e26:	d003      	beq.n	8001e30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e2e:	e0a7      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1a6      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x130>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1a1      	bne.n	8001d88 <HAL_SPI_TransmitReceive+0x130>
 8001e44:	e07c      	b.n	8001f40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_SPI_TransmitReceive+0x1fc>
 8001e4e:	8b7b      	ldrh	r3, [r7, #26]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d16b      	bne.n	8001f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7a:	e057      	b.n	8001f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d11c      	bne.n	8001ec4 <HAL_SPI_TransmitReceive+0x26c>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <HAL_SPI_TransmitReceive+0x26c>
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d114      	bne.n	8001ec4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	7812      	ldrb	r2, [r2, #0]
 8001ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d119      	bne.n	8001f06 <HAL_SPI_TransmitReceive+0x2ae>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d014      	beq.n	8001f06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f02:	2301      	movs	r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f06:	f7fe fdef 	bl	8000ae8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d803      	bhi.n	8001f1e <HAL_SPI_TransmitReceive+0x2c6>
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1c:	d102      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x2cc>
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f2a:	e029      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1a2      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x224>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d19d      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f917 	bl	8002178 <SPI_EndRxTxTransaction>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001f5c:	e010      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10b      	bne.n	8001f7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	e000      	b.n	8001f80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3730      	adds	r7, #48	; 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fac:	f7fe fd9c 	bl	8000ae8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fbc:	f7fe fd94 	bl	8000ae8 <HAL_GetTick>
 8001fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	015b      	lsls	r3, r3, #5
 8001fc8:	0d1b      	lsrs	r3, r3, #20
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fd2:	e054      	b.n	800207e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d050      	beq.n	800207e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fdc:	f7fe fd84 	bl	8000ae8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d902      	bls.n	8001ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d13d      	bne.n	800206e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800200a:	d111      	bne.n	8002030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002014:	d004      	beq.n	8002020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d107      	bne.n	8002030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002038:	d10f      	bne.n	800205a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e017      	b.n	800209e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3b01      	subs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	bf0c      	ite	eq
 800208e:	2301      	moveq	r3, #1
 8002090:	2300      	movne	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	429a      	cmp	r2, r3
 800209a:	d19b      	bne.n	8001fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c0:	d111      	bne.n	80020e6 <SPI_EndRxTransaction+0x3a>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ca:	d004      	beq.n	80020d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d4:	d107      	bne.n	80020e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ee:	d12a      	bne.n	8002146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f8:	d012      	beq.n	8002120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff49 	bl	8001f9c <SPI_WaitFlagStateUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d02d      	beq.n	800216c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e026      	b.n	800216e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	2101      	movs	r1, #1
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff ff36 	bl	8001f9c <SPI_WaitFlagStateUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d01a      	beq.n	800216c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e013      	b.n	800216e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	2101      	movs	r1, #1
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ff23 	bl	8001f9c <SPI_WaitFlagStateUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d007      	beq.n	800216c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e000      	b.n	800216e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <SPI_EndRxTxTransaction+0x7c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <SPI_EndRxTxTransaction+0x80>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021a2:	d112      	bne.n	80021ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2200      	movs	r2, #0
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fef4 	bl	8001f9c <SPI_WaitFlagStateUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e00f      	b.n	80021ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d0f2      	beq.n	80021ca <SPI_EndRxTxTransaction+0x52>
 80021e4:	e000      	b.n	80021e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80021e6:	bf00      	nop
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000
 80021f8:	165e9f81 	.word	0x165e9f81

080021fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e03f      	b.n	800228e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fb4c 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f929 	bl	8002498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002254:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002264:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002274:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b08a      	sub	sp, #40	; 0x28
 800229a:	af02      	add	r7, sp, #8
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d17c      	bne.n	80023b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_UART_Transmit+0x2c>
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e075      	b.n	80023b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_UART_Transmit+0x3e>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e06e      	b.n	80023b2 <HAL_UART_Transmit+0x11c>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2221      	movs	r2, #33	; 0x21
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fbfd 	bl	8000ae8 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	88fa      	ldrh	r2, [r7, #6]
 80022f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	88fa      	ldrh	r2, [r7, #6]
 80022fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002304:	d108      	bne.n	8002318 <HAL_UART_Transmit+0x82>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d104      	bne.n	8002318 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e003      	b.n	8002320 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002328:	e02a      	b.n	8002380 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f840 	bl	80023ba <UART_WaitOnFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e036      	b.n	80023b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002358:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	3302      	adds	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	e007      	b.n	8002372 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	3301      	adds	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1cf      	bne.n	800232a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f810 	bl	80023ba <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e006      	b.n	80023b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b090      	sub	sp, #64	; 0x40
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	4613      	mov	r3, r2
 80023c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ca:	e050      	b.n	800246e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d2:	d04c      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d007      	beq.n	80023ea <UART_WaitOnFlagUntilTimeout+0x30>
 80023da:	f7fe fb85 	bl	8000ae8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d241      	bcs.n	800246e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	330c      	adds	r3, #12
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	330c      	adds	r3, #12
 8002408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800240a:	637a      	str	r2, [r7, #52]	; 0x34
 800240c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002410:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e5      	bne.n	80023ea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3314      	adds	r3, #20
 8002424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	e853 3f00 	ldrex	r3, [r3]
 800242c:	613b      	str	r3, [r7, #16]
   return(result);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	63bb      	str	r3, [r7, #56]	; 0x38
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800243e:	623a      	str	r2, [r7, #32]
 8002440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	69f9      	ldr	r1, [r7, #28]
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	e841 2300 	strex	r3, r2, [r1]
 800244a:	61bb      	str	r3, [r7, #24]
   return(result);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1e5      	bne.n	800241e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e00f      	b.n	800248e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4013      	ands	r3, r2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	429a      	cmp	r2, r3
 800248a:	d09f      	beq.n	80023cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3740      	adds	r7, #64	; 0x40
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249c:	b09f      	sub	sp, #124	; 0x7c
 800249e:	af00      	add	r7, sp, #0
 80024a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	ea40 0301 	orr.w	r3, r0, r1
 80024b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024dc:	f021 010c 	bic.w	r1, r1, #12
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e6:	430b      	orrs	r3, r1
 80024e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f6:	6999      	ldr	r1, [r3, #24]
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	ea40 0301 	orr.w	r3, r0, r1
 8002500:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4bc5      	ldr	r3, [pc, #788]	; (800281c <UART_SetConfig+0x384>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d004      	beq.n	8002516 <UART_SetConfig+0x7e>
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4bc3      	ldr	r3, [pc, #780]	; (8002820 <UART_SetConfig+0x388>)
 8002512:	429a      	cmp	r2, r3
 8002514:	d103      	bne.n	800251e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002516:	f7ff f9f1 	bl	80018fc <HAL_RCC_GetPCLK2Freq>
 800251a:	6778      	str	r0, [r7, #116]	; 0x74
 800251c:	e002      	b.n	8002524 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800251e:	f7ff f9d9 	bl	80018d4 <HAL_RCC_GetPCLK1Freq>
 8002522:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252c:	f040 80b6 	bne.w	800269c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002532:	461c      	mov	r4, r3
 8002534:	f04f 0500 	mov.w	r5, #0
 8002538:	4622      	mov	r2, r4
 800253a:	462b      	mov	r3, r5
 800253c:	1891      	adds	r1, r2, r2
 800253e:	6439      	str	r1, [r7, #64]	; 0x40
 8002540:	415b      	adcs	r3, r3
 8002542:	647b      	str	r3, [r7, #68]	; 0x44
 8002544:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002548:	1912      	adds	r2, r2, r4
 800254a:	eb45 0303 	adc.w	r3, r5, r3
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	00d9      	lsls	r1, r3, #3
 8002558:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800255c:	00d0      	lsls	r0, r2, #3
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	1911      	adds	r1, r2, r4
 8002564:	6639      	str	r1, [r7, #96]	; 0x60
 8002566:	416b      	adcs	r3, r5
 8002568:	667b      	str	r3, [r7, #100]	; 0x64
 800256a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	1891      	adds	r1, r2, r2
 8002576:	63b9      	str	r1, [r7, #56]	; 0x38
 8002578:	415b      	adcs	r3, r3
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002580:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002584:	f7fd fe26 	bl	80001d4 <__aeabi_uldivmod>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4ba5      	ldr	r3, [pc, #660]	; (8002824 <UART_SetConfig+0x38c>)
 800258e:	fba3 2302 	umull	r2, r3, r3, r2
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	011e      	lsls	r6, r3, #4
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	461c      	mov	r4, r3
 800259a:	f04f 0500 	mov.w	r5, #0
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	6339      	str	r1, [r7, #48]	; 0x30
 80025a6:	415b      	adcs	r3, r3
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
 80025aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025ae:	1912      	adds	r2, r2, r4
 80025b0:	eb45 0303 	adc.w	r3, r5, r3
 80025b4:	f04f 0000 	mov.w	r0, #0
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	00d9      	lsls	r1, r3, #3
 80025be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025c2:	00d0      	lsls	r0, r2, #3
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	1911      	adds	r1, r2, r4
 80025ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80025cc:	416b      	adcs	r3, r5
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80025de:	415b      	adcs	r3, r3
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025ea:	f7fd fdf3 	bl	80001d4 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <UART_SetConfig+0x38c>)
 80025f4:	fba3 1302 	umull	r1, r3, r3, r2
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	2164      	movs	r1, #100	; 0x64
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	3332      	adds	r3, #50	; 0x32
 8002606:	4a87      	ldr	r2, [pc, #540]	; (8002824 <UART_SetConfig+0x38c>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002614:	441e      	add	r6, r3
 8002616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002618:	4618      	mov	r0, r3
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	1894      	adds	r4, r2, r2
 8002624:	623c      	str	r4, [r7, #32]
 8002626:	415b      	adcs	r3, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800262e:	1812      	adds	r2, r2, r0
 8002630:	eb41 0303 	adc.w	r3, r1, r3
 8002634:	f04f 0400 	mov.w	r4, #0
 8002638:	f04f 0500 	mov.w	r5, #0
 800263c:	00dd      	lsls	r5, r3, #3
 800263e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002642:	00d4      	lsls	r4, r2, #3
 8002644:	4622      	mov	r2, r4
 8002646:	462b      	mov	r3, r5
 8002648:	1814      	adds	r4, r2, r0
 800264a:	653c      	str	r4, [r7, #80]	; 0x50
 800264c:	414b      	adcs	r3, r1
 800264e:	657b      	str	r3, [r7, #84]	; 0x54
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	461a      	mov	r2, r3
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	1891      	adds	r1, r2, r2
 800265c:	61b9      	str	r1, [r7, #24]
 800265e:	415b      	adcs	r3, r3
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800266a:	f7fd fdb3 	bl	80001d4 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <UART_SetConfig+0x38c>)
 8002674:	fba3 1302 	umull	r1, r3, r3, r2
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	2164      	movs	r1, #100	; 0x64
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	3332      	adds	r3, #50	; 0x32
 8002686:	4a67      	ldr	r2, [pc, #412]	; (8002824 <UART_SetConfig+0x38c>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	f003 0207 	and.w	r2, r3, #7
 8002692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4432      	add	r2, r6
 8002698:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800269a:	e0b9      	b.n	8002810 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800269c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269e:	461c      	mov	r4, r3
 80026a0:	f04f 0500 	mov.w	r5, #0
 80026a4:	4622      	mov	r2, r4
 80026a6:	462b      	mov	r3, r5
 80026a8:	1891      	adds	r1, r2, r2
 80026aa:	6139      	str	r1, [r7, #16]
 80026ac:	415b      	adcs	r3, r3
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026b4:	1912      	adds	r2, r2, r4
 80026b6:	eb45 0303 	adc.w	r3, r5, r3
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	00d9      	lsls	r1, r3, #3
 80026c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026c8:	00d0      	lsls	r0, r2, #3
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	eb12 0804 	adds.w	r8, r2, r4
 80026d2:	eb43 0905 	adc.w	r9, r3, r5
 80026d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026ee:	0082      	lsls	r2, r0, #2
 80026f0:	4640      	mov	r0, r8
 80026f2:	4649      	mov	r1, r9
 80026f4:	f7fd fd6e 	bl	80001d4 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <UART_SetConfig+0x38c>)
 80026fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	011e      	lsls	r6, r3, #4
 8002706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002708:	4618      	mov	r0, r3
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	1894      	adds	r4, r2, r2
 8002714:	60bc      	str	r4, [r7, #8]
 8002716:	415b      	adcs	r3, r3
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271e:	1812      	adds	r2, r2, r0
 8002720:	eb41 0303 	adc.w	r3, r1, r3
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	f04f 0500 	mov.w	r5, #0
 800272c:	00dd      	lsls	r5, r3, #3
 800272e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002732:	00d4      	lsls	r4, r2, #3
 8002734:	4622      	mov	r2, r4
 8002736:	462b      	mov	r3, r5
 8002738:	1814      	adds	r4, r2, r0
 800273a:	64bc      	str	r4, [r7, #72]	; 0x48
 800273c:	414b      	adcs	r3, r1
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	008b      	lsls	r3, r1, #2
 8002754:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002758:	0082      	lsls	r2, r0, #2
 800275a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800275e:	f7fd fd39 	bl	80001d4 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <UART_SetConfig+0x38c>)
 8002768:	fba3 1302 	umull	r1, r3, r3, r2
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	2164      	movs	r1, #100	; 0x64
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	3332      	adds	r3, #50	; 0x32
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <UART_SetConfig+0x38c>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002786:	441e      	add	r6, r3
 8002788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278a:	4618      	mov	r0, r3
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	1894      	adds	r4, r2, r2
 8002796:	603c      	str	r4, [r7, #0]
 8002798:	415b      	adcs	r3, r3
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027a0:	1812      	adds	r2, r2, r0
 80027a2:	eb41 0303 	adc.w	r3, r1, r3
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	f04f 0500 	mov.w	r5, #0
 80027ae:	00dd      	lsls	r5, r3, #3
 80027b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027b4:	00d4      	lsls	r4, r2, #3
 80027b6:	4622      	mov	r2, r4
 80027b8:	462b      	mov	r3, r5
 80027ba:	eb12 0a00 	adds.w	sl, r2, r0
 80027be:	eb43 0b01 	adc.w	fp, r3, r1
 80027c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	008b      	lsls	r3, r1, #2
 80027d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027da:	0082      	lsls	r2, r0, #2
 80027dc:	4650      	mov	r0, sl
 80027de:	4659      	mov	r1, fp
 80027e0:	f7fd fcf8 	bl	80001d4 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <UART_SetConfig+0x38c>)
 80027ea:	fba3 1302 	umull	r1, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2164      	movs	r1, #100	; 0x64
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <UART_SetConfig+0x38c>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4432      	add	r2, r6
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	bf00      	nop
 8002812:	377c      	adds	r7, #124	; 0x7c
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	4d0d      	ldr	r5, [pc, #52]	; (8002860 <__libc_init_array+0x38>)
 800282c:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 800282e:	1b64      	subs	r4, r4, r5
 8002830:	10a4      	asrs	r4, r4, #2
 8002832:	2600      	movs	r6, #0
 8002834:	42a6      	cmp	r6, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	4d0b      	ldr	r5, [pc, #44]	; (8002868 <__libc_init_array+0x40>)
 800283a:	4c0c      	ldr	r4, [pc, #48]	; (800286c <__libc_init_array+0x44>)
 800283c:	f000 f820 	bl	8002880 <_init>
 8002840:	1b64      	subs	r4, r4, r5
 8002842:	10a4      	asrs	r4, r4, #2
 8002844:	2600      	movs	r6, #0
 8002846:	42a6      	cmp	r6, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002850:	4798      	blx	r3
 8002852:	3601      	adds	r6, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	f855 3b04 	ldr.w	r3, [r5], #4
 800285a:	4798      	blx	r3
 800285c:	3601      	adds	r6, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	080028b8 	.word	0x080028b8
 8002864:	080028b8 	.word	0x080028b8
 8002868:	080028b8 	.word	0x080028b8
 800286c:	080028bc 	.word	0x080028bc

08002870 <memset>:
 8002870:	4402      	add	r2, r0
 8002872:	4603      	mov	r3, r0
 8002874:	4293      	cmp	r3, r2
 8002876:	d100      	bne.n	800287a <memset+0xa>
 8002878:	4770      	bx	lr
 800287a:	f803 1b01 	strb.w	r1, [r3], #1
 800287e:	e7f9      	b.n	8002874 <memset+0x4>

08002880 <_init>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr

0800288c <_fini>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr
