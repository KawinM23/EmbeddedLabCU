
Lab4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000383c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a6c  08003a6c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a74  08003a74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a78  08003a78  00013a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004060  20000010  08003a8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004070  08003a8c  00024070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cc0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fa  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00036700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00037748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170bb  00000000  00000000  00038698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117e0  00000000  00000000  0004f753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e1c  00000000  00000000  00060f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5d4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043c0  00000000  00000000  000f5da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039c4 	.word	0x080039c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080039c4 	.word	0x080039c4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96e 	b.w	80004d4 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468c      	mov	ip, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	f040 8083 	bne.w	8000326 <__udivmoddi4+0x116>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d947      	bls.n	80002b6 <__udivmoddi4+0xa6>
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b142      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022c:	f1c2 0020 	rsb	r0, r2, #32
 8000230:	fa24 f000 	lsr.w	r0, r4, r0
 8000234:	4091      	lsls	r1, r2
 8000236:	4097      	lsls	r7, r2
 8000238:	ea40 0c01 	orr.w	ip, r0, r1
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbbc f6f8 	udiv	r6, ip, r8
 8000248:	fa1f fe87 	uxth.w	lr, r7
 800024c:	fb08 c116 	mls	r1, r8, r6, ip
 8000250:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000254:	fb06 f10e 	mul.w	r1, r6, lr
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000262:	f080 8119 	bcs.w	8000498 <__udivmoddi4+0x288>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8116 	bls.w	8000498 <__udivmoddi4+0x288>
 800026c:	3e02      	subs	r6, #2
 800026e:	443b      	add	r3, r7
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0f8 	udiv	r0, r3, r8
 8000278:	fb08 3310 	mls	r3, r8, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fe0e 	mul.w	lr, r0, lr
 8000284:	45a6      	cmp	lr, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	193c      	adds	r4, r7, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8105 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000292:	45a6      	cmp	lr, r4
 8000294:	f240 8102 	bls.w	800049c <__udivmoddi4+0x28c>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a0:	eba4 040e 	sub.w	r4, r4, lr
 80002a4:	2600      	movs	r6, #0
 80002a6:	b11d      	cbz	r5, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c5 4300 	strd	r4, r3, [r5]
 80002b0:	4631      	mov	r1, r6
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	b902      	cbnz	r2, 80002ba <__udivmoddi4+0xaa>
 80002b8:	deff      	udf	#255	; 0xff
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d150      	bne.n	8000364 <__udivmoddi4+0x154>
 80002c2:	1bcb      	subs	r3, r1, r7
 80002c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c8:	fa1f f887 	uxth.w	r8, r7
 80002cc:	2601      	movs	r6, #1
 80002ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d2:	0c21      	lsrs	r1, r4, #16
 80002d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002dc:	fb08 f30c 	mul.w	r3, r8, ip
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d907      	bls.n	80002f4 <__udivmoddi4+0xe4>
 80002e4:	1879      	adds	r1, r7, r1
 80002e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0xe2>
 80002ec:	428b      	cmp	r3, r1
 80002ee:	f200 80e9 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 80002f2:	4684      	mov	ip, r0
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	b2a3      	uxth	r3, r4
 80002f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000300:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000304:	fb08 f800 	mul.w	r8, r8, r0
 8000308:	45a0      	cmp	r8, r4
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x10c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x10a>
 8000314:	45a0      	cmp	r8, r4
 8000316:	f200 80d9 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 800031a:	4618      	mov	r0, r3
 800031c:	eba4 0408 	sub.w	r4, r4, r8
 8000320:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000324:	e7bf      	b.n	80002a6 <__udivmoddi4+0x96>
 8000326:	428b      	cmp	r3, r1
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x12e>
 800032a:	2d00      	cmp	r5, #0
 800032c:	f000 80b1 	beq.w	8000492 <__udivmoddi4+0x282>
 8000330:	2600      	movs	r6, #0
 8000332:	e9c5 0100 	strd	r0, r1, [r5]
 8000336:	4630      	mov	r0, r6
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	fab3 f683 	clz	r6, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d14a      	bne.n	80003dc <__udivmoddi4+0x1cc>
 8000346:	428b      	cmp	r3, r1
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0x140>
 800034a:	4282      	cmp	r2, r0
 800034c:	f200 80b8 	bhi.w	80004c0 <__udivmoddi4+0x2b0>
 8000350:	1a84      	subs	r4, r0, r2
 8000352:	eb61 0103 	sbc.w	r1, r1, r3
 8000356:	2001      	movs	r0, #1
 8000358:	468c      	mov	ip, r1
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0a8      	beq.n	80002b0 <__udivmoddi4+0xa0>
 800035e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000362:	e7a5      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000364:	f1c2 0320 	rsb	r3, r2, #32
 8000368:	fa20 f603 	lsr.w	r6, r0, r3
 800036c:	4097      	lsls	r7, r2
 800036e:	fa01 f002 	lsl.w	r0, r1, r2
 8000372:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000376:	40d9      	lsrs	r1, r3
 8000378:	4330      	orrs	r0, r6
 800037a:	0c03      	lsrs	r3, r0, #16
 800037c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000380:	fa1f f887 	uxth.w	r8, r7
 8000384:	fb0e 1116 	mls	r1, lr, r6, r1
 8000388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800038c:	fb06 f108 	mul.w	r1, r6, r8
 8000390:	4299      	cmp	r1, r3
 8000392:	fa04 f402 	lsl.w	r4, r4, r2
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x19c>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f106 3cff 	add.w	ip, r6, #4294967295
 800039e:	f080 808d 	bcs.w	80004bc <__udivmoddi4+0x2ac>
 80003a2:	4299      	cmp	r1, r3
 80003a4:	f240 808a 	bls.w	80004bc <__udivmoddi4+0x2ac>
 80003a8:	3e02      	subs	r6, #2
 80003aa:	443b      	add	r3, r7
 80003ac:	1a5b      	subs	r3, r3, r1
 80003ae:	b281      	uxth	r1, r0
 80003b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb00 f308 	mul.w	r3, r0, r8
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x1c4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ca:	d273      	bcs.n	80004b4 <__udivmoddi4+0x2a4>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d971      	bls.n	80004b4 <__udivmoddi4+0x2a4>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4439      	add	r1, r7
 80003d4:	1acb      	subs	r3, r1, r3
 80003d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003da:	e778      	b.n	80002ce <__udivmoddi4+0xbe>
 80003dc:	f1c6 0c20 	rsb	ip, r6, #32
 80003e0:	fa03 f406 	lsl.w	r4, r3, r6
 80003e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e8:	431c      	orrs	r4, r3
 80003ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ee:	fa01 f306 	lsl.w	r3, r1, r6
 80003f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fa:	431f      	orrs	r7, r3
 80003fc:	0c3b      	lsrs	r3, r7, #16
 80003fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000402:	fa1f f884 	uxth.w	r8, r4
 8000406:	fb0e 1119 	mls	r1, lr, r9, r1
 800040a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040e:	fb09 fa08 	mul.w	sl, r9, r8
 8000412:	458a      	cmp	sl, r1
 8000414:	fa02 f206 	lsl.w	r2, r2, r6
 8000418:	fa00 f306 	lsl.w	r3, r0, r6
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x220>
 800041e:	1861      	adds	r1, r4, r1
 8000420:	f109 30ff 	add.w	r0, r9, #4294967295
 8000424:	d248      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000426:	458a      	cmp	sl, r1
 8000428:	d946      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800042a:	f1a9 0902 	sub.w	r9, r9, #2
 800042e:	4421      	add	r1, r4
 8000430:	eba1 010a 	sub.w	r1, r1, sl
 8000434:	b2bf      	uxth	r7, r7
 8000436:	fbb1 f0fe 	udiv	r0, r1, lr
 800043a:	fb0e 1110 	mls	r1, lr, r0, r1
 800043e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000442:	fb00 f808 	mul.w	r8, r0, r8
 8000446:	45b8      	cmp	r8, r7
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x24a>
 800044a:	19e7      	adds	r7, r4, r7
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d22e      	bcs.n	80004b0 <__udivmoddi4+0x2a0>
 8000452:	45b8      	cmp	r8, r7
 8000454:	d92c      	bls.n	80004b0 <__udivmoddi4+0x2a0>
 8000456:	3802      	subs	r0, #2
 8000458:	4427      	add	r7, r4
 800045a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045e:	eba7 0708 	sub.w	r7, r7, r8
 8000462:	fba0 8902 	umull	r8, r9, r0, r2
 8000466:	454f      	cmp	r7, r9
 8000468:	46c6      	mov	lr, r8
 800046a:	4649      	mov	r1, r9
 800046c:	d31a      	bcc.n	80004a4 <__udivmoddi4+0x294>
 800046e:	d017      	beq.n	80004a0 <__udivmoddi4+0x290>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x27a>
 8000472:	ebb3 020e 	subs.w	r2, r3, lr
 8000476:	eb67 0701 	sbc.w	r7, r7, r1
 800047a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047e:	40f2      	lsrs	r2, r6
 8000480:	ea4c 0202 	orr.w	r2, ip, r2
 8000484:	40f7      	lsrs	r7, r6
 8000486:	e9c5 2700 	strd	r2, r7, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e70b      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e9      	b.n	8000270 <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fd      	b.n	800029c <__udivmoddi4+0x8c>
 80004a0:	4543      	cmp	r3, r8
 80004a2:	d2e5      	bcs.n	8000470 <__udivmoddi4+0x260>
 80004a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a8:	eb69 0104 	sbc.w	r1, r9, r4
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7df      	b.n	8000470 <__udivmoddi4+0x260>
 80004b0:	4608      	mov	r0, r1
 80004b2:	e7d2      	b.n	800045a <__udivmoddi4+0x24a>
 80004b4:	4660      	mov	r0, ip
 80004b6:	e78d      	b.n	80003d4 <__udivmoddi4+0x1c4>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7b9      	b.n	8000430 <__udivmoddi4+0x220>
 80004bc:	4666      	mov	r6, ip
 80004be:	e775      	b.n	80003ac <__udivmoddi4+0x19c>
 80004c0:	4630      	mov	r0, r6
 80004c2:	e74a      	b.n	800035a <__udivmoddi4+0x14a>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	4439      	add	r1, r7
 80004ca:	e713      	b.n	80002f4 <__udivmoddi4+0xe4>
 80004cc:	3802      	subs	r0, #2
 80004ce:	443c      	add	r4, r7
 80004d0:	e724      	b.n	800031c <__udivmoddi4+0x10c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <vApplicationGetIdleTaskMemory+0x30>)
 80004ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2280      	movs	r2, #128	; 0x80
 80004f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	2000002c 	.word	0x2000002c
 8000508:	20000080 	.word	0x20000080

0800050c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b096      	sub	sp, #88	; 0x58
 8000510:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000512:	f000 fac7 	bl	8000aa4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000516:	f000 f84b 	bl	80005b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051a:	f000 f8df 	bl	80006dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800051e:	f000 f8b3 	bl	8000688 <MX_USART2_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of sendA */
	osThreadDef(sendA, StartSendA, osPriorityNormal, 0, 128);
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <main+0x8c>)
 8000524:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendAHandle = osThreadCreate(osThread(sendA), NULL);
 8000536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f001 ffe8 	bl	8002512 <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a15      	ldr	r2, [pc, #84]	; (800059c <main+0x90>)
 8000546:	6013      	str	r3, [r2, #0]

	/* definition and creation of blinkLED */
	osThreadDef(blinkLED, StartBlinkLED, osPriorityIdle, 0, 128);
 8000548:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <main+0x94>)
 800054a:	f107 0420 	add.w	r4, r7, #32
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	blinkLEDHandle = osThreadCreate(osThread(blinkLED), NULL);
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 ffd5 	bl	8002512 <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <main+0x98>)
 800056c:	6013      	str	r3, [r2, #0]

	/* definition and creation of sendB */
	osThreadDef(sendB, StartSendB, osPriorityIdle, 0, 128);
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <main+0x9c>)
 8000570:	1d3c      	adds	r4, r7, #4
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sendBHandle = osThreadCreate(osThread(sendB), NULL);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f001 ffc4 	bl	8002512 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <main+0xa0>)
 800058e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000590:	f001 ffb8 	bl	8002504 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000594:	e7fe      	b.n	8000594 <main+0x88>
 8000596:	bf00      	nop
 8000598:	080039f8 	.word	0x080039f8
 800059c:	20003fd4 	.word	0x20003fd4
 80005a0:	08003a14 	.word	0x08003a14
 80005a4:	20003fdc 	.word	0x20003fdc
 80005a8:	08003a30 	.word	0x08003a30
 80005ac:	20003fd8 	.word	0x20003fd8

080005b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f9f8 	bl	80039b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b29      	ldr	r3, [pc, #164]	; (8000680 <SystemClock_Config+0xd0>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a28      	ldr	r2, [pc, #160]	; (8000680 <SystemClock_Config+0xd0>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd4>)
 80005fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000624:	2310      	movs	r3, #16
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000628:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062e:	2304      	movs	r3, #4
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000632:	2307      	movs	r3, #7
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fd0e 	bl	800105c <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9a>
		Error_Handler();
 8000646:	f000 f8ff 	bl	8000848 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 ff70 	bl	800154c <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc6>
		Error_Handler();
 8000672:	f000 f8e9 	bl	8000848 <Error_Handler>
	}
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f001 fbf2 	bl	8001ea8 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006ca:	f000 f8bd 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20003fe0 	.word	0x20003fe0
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b26      	ldr	r3, [pc, #152]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a25      	ldr	r2, [pc, #148]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <MX_GPIO_Init+0xd4>)
 8000768:	f000 fc44 	bl	8000ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000776:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_GPIO_Init+0xd8>)
 8000784:	f000 fab2 	bl	8000cec <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000788:	2320      	movs	r3, #32
 800078a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0xd4>)
 80007a0:	f000 faa4 	bl	8000cec <HAL_GPIO_Init>

}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40020800 	.word	0x40020800

080007b8 <StartSendA>:
 * @brief  Function implementing the sendA thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendA */
void StartSendA(void const *argument) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	char c = 'A';
 80007c0:	2341      	movs	r3, #65	; 0x41
 80007c2:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart2, &c, sizeof(c), HAL_MAX_DELAY);
 80007c4:	f107 010f 	add.w	r1, r7, #15
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	2201      	movs	r2, #1
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <StartSendA+0x24>)
 80007d0:	f001 fbb7 	bl	8001f42 <HAL_UART_Transmit>
		osDelay(50);
 80007d4:	2032      	movs	r0, #50	; 0x32
 80007d6:	f001 fee8 	bl	80025aa <osDelay>
		HAL_UART_Transmit(&huart2, &c, sizeof(c), HAL_MAX_DELAY);
 80007da:	e7f3      	b.n	80007c4 <StartSendA+0xc>
 80007dc:	20003fe0 	.word	0x20003fe0

080007e0 <StartBlinkLED>:
 * @brief Function implementing the blinkLED thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLED */
void StartBlinkLED(void const *argument) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBlinkLED */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007e8:	2120      	movs	r1, #32
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <StartBlinkLED+0x18>)
 80007ec:	f000 fc1b 	bl	8001026 <HAL_GPIO_TogglePin>
		osDelay(9);
 80007f0:	2009      	movs	r0, #9
 80007f2:	f001 feda 	bl	80025aa <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f6:	e7f7      	b.n	80007e8 <StartBlinkLED+0x8>
 80007f8:	40020000 	.word	0x40020000

080007fc <StartSendB>:
 * @brief Function implementing the sendB thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSendB */
void StartSendB(void const *argument) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSendB */
	/* Infinite loop */
	char c = 'B';
 8000804:	2342      	movs	r3, #66	; 0x42
 8000806:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart2, &c, sizeof(c), HAL_MAX_DELAY);
 8000808:	f107 010f 	add.w	r1, r7, #15
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	2201      	movs	r2, #1
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <StartSendB+0x24>)
 8000814:	f001 fb95 	bl	8001f42 <HAL_UART_Transmit>
		osDelay(128);
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	f001 fec6 	bl	80025aa <osDelay>
		HAL_UART_Transmit(&huart2, &c, sizeof(c), HAL_MAX_DELAY);
 800081e:	e7f3      	b.n	8000808 <StartSendB+0xc>
 8000820:	20003fe0 	.word	0x20003fe0

08000824 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d101      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000836:	f000 f957 	bl	8000ae8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000

08000848 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <HAL_MspInit+0x54>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x54>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x54>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x54>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 f9fd 	bl	8000c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 f9e3 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2019      	movs	r0, #25
 8000952:	f000 f9a1 	bl	8000c98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000956:	2019      	movs	r0, #25
 8000958:	f000 f9ba 	bl	8000cd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_InitTick+0xa0>)
 8000962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <HAL_InitTick+0xa0>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6453      	str	r3, [r2, #68]	; 0x44
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <HAL_InitTick+0xa0>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f000 ffde 	bl	8001944 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000988:	f000 ffc8 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 800098c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800098e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <HAL_InitTick+0xa4>)
 8000992:	fba2 2303 	umull	r2, r3, r2, r3
 8000996:	0c9b      	lsrs	r3, r3, #18
 8000998:	3b01      	subs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <HAL_InitTick+0xa8>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <HAL_InitTick+0xac>)
 80009a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_InitTick+0xa8>)
 80009a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_InitTick+0xa8>)
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_InitTick+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_InitTick+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009bc:	4809      	ldr	r0, [pc, #36]	; (80009e4 <HAL_InitTick+0xa8>)
 80009be:	f000 fff3 	bl	80019a8 <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <HAL_InitTick+0xa8>)
 80009ca:	f001 f847 	bl	8001a5c <HAL_TIM_Base_Start_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	431bde83 	.word	0x431bde83
 80009e4:	20004024 	.word	0x20004024
 80009e8:	40010000 	.word	0x40010000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a1e:	f001 f87f 	bl	8001b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20004024 	.word	0x20004024

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	; (8000a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f002 ff75 	bl	800396c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd43 	bl	800050c <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a94:	08003a7c 	.word	0x08003a7c
  ldr r2, =_sbss
 8000a98:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a9c:	20004070 	.word	0x20004070

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f8d8 	bl	8000c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f7ff ff32 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff febc 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	2000406c 	.word	0x2000406c

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000406c 	.word	0x2000406c

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff4c 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000caa:	f7ff ff61 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f7ff ffb1 	bl	8000c1c <NVIC_EncodePriority>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff80 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff54 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e159      	b.n	8000fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8148 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d005      	beq.n	8000d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d130      	bne.n	8000da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	091b      	lsrs	r3, r3, #4
 8000d8a:	f003 0201 	and.w	r2, r3, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d017      	beq.n	8000ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a2 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a56      	ldr	r2, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8e:	4a52      	ldr	r2, [pc, #328]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a49      	ldr	r2, [pc, #292]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x202>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a48      	ldr	r2, [pc, #288]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1fe>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1fa>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a45      	ldr	r2, [pc, #276]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1f2>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4935      	ldr	r1, [pc, #212]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0e:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f32:	4a2f      	ldr	r2, [pc, #188]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f38:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f aea2 	bls.w	8000d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40013800 	.word	0x40013800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40020800 	.word	0x40020800
 8000fe8:	40020c00 	.word	0x40020c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	041a      	lsls	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	041a      	lsls	r2, r3, #16
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43d9      	mvns	r1, r3
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	400b      	ands	r3, r1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e264      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b99      	ldr	r3, [pc, #612]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e23f      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a90      	ldr	r2, [pc, #576]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a8a      	ldr	r2, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a87      	ldr	r2, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a83      	ldr	r2, [pc, #524]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a80      	ldr	r2, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcfc 	bl	8000b10 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcf8 	bl	8000b10 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e204      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fce8 	bl	8000b10 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fce4 	bl	8000b10 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1f0      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e1c4      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4952      	ldr	r1, [pc, #328]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc9d 	bl	8000b10 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc99 	bl	8000b10 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e1a5      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4940      	ldr	r1, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc7c 	bl	8000b10 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc78 	bl	8000b10 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e184      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d030      	beq.n	80012a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fc5c 	bl	8000b10 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc58 	bl	8000b10 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e164      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fc45 	bl	8000b10 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc41 	bl	8000b10 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e14d      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a0 	beq.w	80013f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d121      	bne.n	8001336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fc07 	bl	8000b10 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e011      	b.n	800132a <HAL_RCC_OscConfig+0x2ce>
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
 8001314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff fbfa 	bl	8000b10 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e106      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b85      	ldr	r3, [pc, #532]	; (8001540 <HAL_RCC_OscConfig+0x4e4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800133e:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a80      	ldr	r2, [pc, #512]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a7a      	ldr	r2, [pc, #488]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800136e:	4b75      	ldr	r3, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a74      	ldr	r2, [pc, #464]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	4b72      	ldr	r3, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a71      	ldr	r2, [pc, #452]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fbbf 	bl	8000b10 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff fbbb 	bl	8000b10 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0c5      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x33a>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff fba9 	bl	8000b10 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff fba5 	bl	8000b10 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0af      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 809b 	beq.w	8001536 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d05c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d141      	bne.n	8001498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <HAL_RCC_OscConfig+0x4ec>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb79 	bl	8000b10 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb75 	bl	8000b10 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e081      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001434:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	019b      	lsls	r3, r3, #6
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	3b01      	subs	r3, #1
 800145a:	041b      	lsls	r3, r3, #16
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_RCC_OscConfig+0x4ec>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb4e 	bl	8000b10 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fb4a 	bl	8000b10 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e056      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x41c>
 8001496:	e04e      	b.n	8001536 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_RCC_OscConfig+0x4ec>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fb37 	bl	8000b10 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fb33 	bl	8000b10 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e03f      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x44a>
 80014c4:	e037      	b.n	8001536 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e032      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_RCC_OscConfig+0x4e8>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d028      	beq.n	8001532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d121      	bne.n	8001532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d11a      	bne.n	8001532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001508:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800150a:	4293      	cmp	r3, r2
 800150c:	d111      	bne.n	8001532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	3b01      	subs	r3, #1
 800151c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800151e:	429a      	cmp	r2, r3
 8001520:	d107      	bne.n	8001532 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40007000 	.word	0x40007000
 8001544:	40023800 	.word	0x40023800
 8001548:	42470060 	.word	0x42470060

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0cc      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90c      	bls.n	8001588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b65      	ldr	r3, [pc, #404]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d044      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e067      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4934      	ldr	r1, [pc, #208]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fa68 	bl	8000b10 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa64 	bl	8000b10 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20c      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f821 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	490a      	ldr	r1, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f922 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	08003a54 	.word	0x08003a54
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	2300      	movs	r3, #0
 800172a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001730:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d00d      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x40>
 800173c:	2b08      	cmp	r3, #8
 800173e:	f200 80bd 	bhi.w	80018bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x3a>
 800174a:	e0b7      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800174e:	60bb      	str	r3, [r7, #8]
       break;
 8001750:	e0b7      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b61      	ldr	r3, [pc, #388]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001754:	60bb      	str	r3, [r7, #8]
      break;
 8001756:	e0b4      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04d      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	461a      	mov	r2, r3
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	ea02 0800 	and.w	r8, r2, r0
 8001786:	ea03 0901 	and.w	r9, r3, r1
 800178a:	4640      	mov	r0, r8
 800178c:	4649      	mov	r1, r9
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	014b      	lsls	r3, r1, #5
 8001798:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800179c:	0142      	lsls	r2, r0, #5
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	ebb0 0008 	subs.w	r0, r0, r8
 80017a6:	eb61 0109 	sbc.w	r1, r1, r9
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017b8:	0182      	lsls	r2, r0, #6
 80017ba:	1a12      	subs	r2, r2, r0
 80017bc:	eb63 0301 	sbc.w	r3, r3, r1
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	00d9      	lsls	r1, r3, #3
 80017ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017ce:	00d0      	lsls	r0, r2, #3
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	eb12 0208 	adds.w	r2, r2, r8
 80017d8:	eb43 0309 	adc.w	r3, r3, r9
 80017dc:	f04f 0000 	mov.w	r0, #0
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	0259      	lsls	r1, r3, #9
 80017e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017ea:	0250      	lsls	r0, r2, #9
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	461a      	mov	r2, r3
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	f7fe fcf0 	bl	80001e0 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e04a      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	461a      	mov	r2, r3
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f240 10ff 	movw	r0, #511	; 0x1ff
 800181a:	f04f 0100 	mov.w	r1, #0
 800181e:	ea02 0400 	and.w	r4, r2, r0
 8001822:	ea03 0501 	and.w	r5, r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	014b      	lsls	r3, r1, #5
 8001834:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001838:	0142      	lsls	r2, r0, #5
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	1b00      	subs	r0, r0, r4
 8001840:	eb61 0105 	sbc.w	r1, r1, r5
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	018b      	lsls	r3, r1, #6
 800184e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001852:	0182      	lsls	r2, r0, #6
 8001854:	1a12      	subs	r2, r2, r0
 8001856:	eb63 0301 	sbc.w	r3, r3, r1
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	00d9      	lsls	r1, r3, #3
 8001864:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001868:	00d0      	lsls	r0, r2, #3
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	1912      	adds	r2, r2, r4
 8001870:	eb45 0303 	adc.w	r3, r5, r3
 8001874:	f04f 0000 	mov.w	r0, #0
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	0299      	lsls	r1, r3, #10
 800187e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001882:	0290      	lsls	r0, r2, #10
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	461a      	mov	r2, r3
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	f7fe fca4 	bl	80001e0 <__aeabi_uldivmod>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4613      	mov	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	60bb      	str	r3, [r7, #8]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018be:	60bb      	str	r3, [r7, #8]
      break;
 80018c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c2:	68bb      	ldr	r3, [r7, #8]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	007a1200 	.word	0x007a1200

080018dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff0 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08003a64 	.word	0x08003a64

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffdc 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0b5b      	lsrs	r3, r3, #13
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	08003a64 	.word	0x08003a64

08001944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	220f      	movs	r2, #15
 8001952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0203 	and.w	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_RCC_GetClockConfig+0x60>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0207 	and.w	r2, r3, #7
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	601a      	str	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e041      	b.n	8001a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f839 	bl	8001a46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 f9ca 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d001      	beq.n	8001a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e044      	b.n	8001afe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_TIM_Base_Start_IT+0xb0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d018      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9e:	d013      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <HAL_TIM_Base_Start_IT+0xb4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00e      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_TIM_Base_Start_IT+0xbc>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d004      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x6c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <HAL_TIM_Base_Start_IT+0xc0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d111      	bne.n	8001aec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d010      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aea:	e007      	b.n	8001afc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800
 8001b18:	40000c00 	.word	0x40000c00
 8001b1c:	40014000 	.word	0x40014000

08001b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d122      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d11b      	bne.n	8001b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f06f 0202 	mvn.w	r2, #2
 8001b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8ee 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001b68:	e005      	b.n	8001b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f8e0 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8f1 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d122      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d11b      	bne.n	8001bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f06f 0204 	mvn.w	r2, #4
 8001ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8c4 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001bbc:	e005      	b.n	8001bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8b6 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8c7 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d122      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d11b      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0208 	mvn.w	r2, #8
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f89a 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f88c 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f89d 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d122      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d11b      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0210 	mvn.w	r2, #16
 8001c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f870 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8001c64:	e005      	b.n	8001c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f862 	bl	8001d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f873 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0201 	mvn.w	r2, #1
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7fe fdc0 	bl	8000824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b80      	cmp	r3, #128	; 0x80
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbc:	2b80      	cmp	r3, #128	; 0x80
 8001cbe:	d107      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 f8e2 	bl	8001e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cda:	2b40      	cmp	r3, #64	; 0x40
 8001cdc:	d10e      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce8:	2b40      	cmp	r3, #64	; 0x40
 8001cea:	d107      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f838 	bl	8001d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d107      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0220 	mvn.w	r2, #32
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8ac 	bl	8001e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a34      	ldr	r2, [pc, #208]	; (8001e64 <TIM_Base_SetConfig+0xe4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00f      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d00b      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <TIM_Base_SetConfig+0xe8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a30      	ldr	r2, [pc, #192]	; (8001e6c <TIM_Base_SetConfig+0xec>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x38>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <TIM_Base_SetConfig+0xf0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d108      	bne.n	8001dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a25      	ldr	r2, [pc, #148]	; (8001e64 <TIM_Base_SetConfig+0xe4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd8:	d017      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a22      	ldr	r2, [pc, #136]	; (8001e68 <TIM_Base_SetConfig+0xe8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <TIM_Base_SetConfig+0xec>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00f      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <TIM_Base_SetConfig+0xf0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00b      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <TIM_Base_SetConfig+0xf4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <TIM_Base_SetConfig+0xf8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d003      	beq.n	8001e0a <TIM_Base_SetConfig+0x8a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <TIM_Base_SetConfig+0xfc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d108      	bne.n	8001e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <TIM_Base_SetConfig+0xe4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d103      	bne.n	8001e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	615a      	str	r2, [r3, #20]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40014400 	.word	0x40014400
 8001e7c:	40014800 	.word	0x40014800

08001e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e03f      	b.n	8001f3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fcec 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2224      	movs	r2, #36	; 0x24
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f929 	bl	8002144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b08a      	sub	sp, #40	; 0x28
 8001f46:	af02      	add	r7, sp, #8
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d17c      	bne.n	800205c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_UART_Transmit+0x2c>
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e075      	b.n	800205e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_UART_Transmit+0x3e>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e06e      	b.n	800205e <HAL_UART_Transmit+0x11c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2221      	movs	r2, #33	; 0x21
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f96:	f7fe fdbb 	bl	8000b10 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_UART_Transmit+0x82>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e003      	b.n	8001fcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fd4:	e02a      	b.n	800202c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f840 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e036      	b.n	800205e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cf      	bne.n	8001fd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f810 	bl	8002066 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e006      	b.n	800205e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b090      	sub	sp, #64	; 0x40
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	603b      	str	r3, [r7, #0]
 8002072:	4613      	mov	r3, r2
 8002074:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002076:	e050      	b.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207e:	d04c      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
 8002086:	f7fe fd43 	bl	8000b10 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002092:	429a      	cmp	r2, r3
 8002094:	d241      	bcs.n	800211a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	330c      	adds	r3, #12
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	637a      	str	r2, [r7, #52]	; 0x34
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020be:	e841 2300 	strex	r3, r2, [r1]
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e5      	bne.n	8002096 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3314      	adds	r3, #20
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	e853 3f00 	ldrex	r3, [r3]
 80020d8:	613b      	str	r3, [r7, #16]
   return(result);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3314      	adds	r3, #20
 80020e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ea:	623a      	str	r2, [r7, #32]
 80020ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ee:	69f9      	ldr	r1, [r7, #28]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	e841 2300 	strex	r3, r2, [r1]
 80020f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e5      	bne.n	80020ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e00f      	b.n	800213a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4013      	ands	r3, r2
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	429a      	cmp	r2, r3
 8002136:	d09f      	beq.n	8002078 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3740      	adds	r7, #64	; 0x40
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002148:	b09f      	sub	sp, #124	; 0x7c
 800214a:	af00      	add	r7, sp, #0
 800214c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	ea40 0301 	orr.w	r3, r0, r1
 8002164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	431a      	orrs	r2, r3
 8002170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	431a      	orrs	r2, r3
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4313      	orrs	r3, r2
 800217c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800217e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002188:	f021 010c 	bic.w	r1, r1, #12
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002192:	430b      	orrs	r3, r1
 8002194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a2:	6999      	ldr	r1, [r3, #24]
 80021a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	ea40 0301 	orr.w	r3, r0, r1
 80021ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4bc5      	ldr	r3, [pc, #788]	; (80024c8 <UART_SetConfig+0x384>)
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d004      	beq.n	80021c2 <UART_SetConfig+0x7e>
 80021b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4bc3      	ldr	r3, [pc, #780]	; (80024cc <UART_SetConfig+0x388>)
 80021be:	429a      	cmp	r2, r3
 80021c0:	d103      	bne.n	80021ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021c2:	f7ff fbab 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 80021c6:	6778      	str	r0, [r7, #116]	; 0x74
 80021c8:	e002      	b.n	80021d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ca:	f7ff fb93 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 80021ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d8:	f040 80b6 	bne.w	8002348 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021de:	461c      	mov	r4, r3
 80021e0:	f04f 0500 	mov.w	r5, #0
 80021e4:	4622      	mov	r2, r4
 80021e6:	462b      	mov	r3, r5
 80021e8:	1891      	adds	r1, r2, r2
 80021ea:	6439      	str	r1, [r7, #64]	; 0x40
 80021ec:	415b      	adcs	r3, r3
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
 80021f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021f4:	1912      	adds	r2, r2, r4
 80021f6:	eb45 0303 	adc.w	r3, r5, r3
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	00d9      	lsls	r1, r3, #3
 8002204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002208:	00d0      	lsls	r0, r2, #3
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	1911      	adds	r1, r2, r4
 8002210:	6639      	str	r1, [r7, #96]	; 0x60
 8002212:	416b      	adcs	r3, r5
 8002214:	667b      	str	r3, [r7, #100]	; 0x64
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	1891      	adds	r1, r2, r2
 8002222:	63b9      	str	r1, [r7, #56]	; 0x38
 8002224:	415b      	adcs	r3, r3
 8002226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002228:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800222c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002230:	f7fd ffd6 	bl	80001e0 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4ba5      	ldr	r3, [pc, #660]	; (80024d0 <UART_SetConfig+0x38c>)
 800223a:	fba3 2302 	umull	r2, r3, r3, r2
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	011e      	lsls	r6, r3, #4
 8002242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002244:	461c      	mov	r4, r3
 8002246:	f04f 0500 	mov.w	r5, #0
 800224a:	4622      	mov	r2, r4
 800224c:	462b      	mov	r3, r5
 800224e:	1891      	adds	r1, r2, r2
 8002250:	6339      	str	r1, [r7, #48]	; 0x30
 8002252:	415b      	adcs	r3, r3
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
 8002256:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800225a:	1912      	adds	r2, r2, r4
 800225c:	eb45 0303 	adc.w	r3, r5, r3
 8002260:	f04f 0000 	mov.w	r0, #0
 8002264:	f04f 0100 	mov.w	r1, #0
 8002268:	00d9      	lsls	r1, r3, #3
 800226a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800226e:	00d0      	lsls	r0, r2, #3
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	1911      	adds	r1, r2, r4
 8002276:	65b9      	str	r1, [r7, #88]	; 0x58
 8002278:	416b      	adcs	r3, r5
 800227a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800227c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	1891      	adds	r1, r2, r2
 8002288:	62b9      	str	r1, [r7, #40]	; 0x28
 800228a:	415b      	adcs	r3, r3
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002292:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002296:	f7fd ffa3 	bl	80001e0 <__aeabi_uldivmod>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <UART_SetConfig+0x38c>)
 80022a0:	fba3 1302 	umull	r1, r3, r3, r2
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	2164      	movs	r1, #100	; 0x64
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	3332      	adds	r3, #50	; 0x32
 80022b2:	4a87      	ldr	r2, [pc, #540]	; (80024d0 <UART_SetConfig+0x38c>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c0:	441e      	add	r6, r3
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	4618      	mov	r0, r3
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	1894      	adds	r4, r2, r2
 80022d0:	623c      	str	r4, [r7, #32]
 80022d2:	415b      	adcs	r3, r3
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022da:	1812      	adds	r2, r2, r0
 80022dc:	eb41 0303 	adc.w	r3, r1, r3
 80022e0:	f04f 0400 	mov.w	r4, #0
 80022e4:	f04f 0500 	mov.w	r5, #0
 80022e8:	00dd      	lsls	r5, r3, #3
 80022ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022ee:	00d4      	lsls	r4, r2, #3
 80022f0:	4622      	mov	r2, r4
 80022f2:	462b      	mov	r3, r5
 80022f4:	1814      	adds	r4, r2, r0
 80022f6:	653c      	str	r4, [r7, #80]	; 0x50
 80022f8:	414b      	adcs	r3, r1
 80022fa:	657b      	str	r3, [r7, #84]	; 0x54
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	461a      	mov	r2, r3
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	1891      	adds	r1, r2, r2
 8002308:	61b9      	str	r1, [r7, #24]
 800230a:	415b      	adcs	r3, r3
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002312:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002316:	f7fd ff63 	bl	80001e0 <__aeabi_uldivmod>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <UART_SetConfig+0x38c>)
 8002320:	fba3 1302 	umull	r1, r3, r3, r2
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	2164      	movs	r1, #100	; 0x64
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	3332      	adds	r3, #50	; 0x32
 8002332:	4a67      	ldr	r2, [pc, #412]	; (80024d0 <UART_SetConfig+0x38c>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	f003 0207 	and.w	r2, r3, #7
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4432      	add	r2, r6
 8002344:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002346:	e0b9      	b.n	80024bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002348:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234a:	461c      	mov	r4, r3
 800234c:	f04f 0500 	mov.w	r5, #0
 8002350:	4622      	mov	r2, r4
 8002352:	462b      	mov	r3, r5
 8002354:	1891      	adds	r1, r2, r2
 8002356:	6139      	str	r1, [r7, #16]
 8002358:	415b      	adcs	r3, r3
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002360:	1912      	adds	r2, r2, r4
 8002362:	eb45 0303 	adc.w	r3, r5, r3
 8002366:	f04f 0000 	mov.w	r0, #0
 800236a:	f04f 0100 	mov.w	r1, #0
 800236e:	00d9      	lsls	r1, r3, #3
 8002370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002374:	00d0      	lsls	r0, r2, #3
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	eb12 0804 	adds.w	r8, r2, r4
 800237e:	eb43 0905 	adc.w	r9, r3, r5
 8002382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4618      	mov	r0, r3
 8002388:	f04f 0100 	mov.w	r1, #0
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	008b      	lsls	r3, r1, #2
 8002396:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800239a:	0082      	lsls	r2, r0, #2
 800239c:	4640      	mov	r0, r8
 800239e:	4649      	mov	r1, r9
 80023a0:	f7fd ff1e 	bl	80001e0 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <UART_SetConfig+0x38c>)
 80023aa:	fba3 2302 	umull	r2, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	011e      	lsls	r6, r3, #4
 80023b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b4:	4618      	mov	r0, r3
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	1894      	adds	r4, r2, r2
 80023c0:	60bc      	str	r4, [r7, #8]
 80023c2:	415b      	adcs	r3, r3
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023ca:	1812      	adds	r2, r2, r0
 80023cc:	eb41 0303 	adc.w	r3, r1, r3
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	f04f 0500 	mov.w	r5, #0
 80023d8:	00dd      	lsls	r5, r3, #3
 80023da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023de:	00d4      	lsls	r4, r2, #3
 80023e0:	4622      	mov	r2, r4
 80023e2:	462b      	mov	r3, r5
 80023e4:	1814      	adds	r4, r2, r0
 80023e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80023e8:	414b      	adcs	r3, r1
 80023ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	008b      	lsls	r3, r1, #2
 8002400:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002404:	0082      	lsls	r2, r0, #2
 8002406:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800240a:	f7fd fee9 	bl	80001e0 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <UART_SetConfig+0x38c>)
 8002414:	fba3 1302 	umull	r1, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	2164      	movs	r1, #100	; 0x64
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	3332      	adds	r3, #50	; 0x32
 8002426:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <UART_SetConfig+0x38c>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002432:	441e      	add	r6, r3
 8002434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002436:	4618      	mov	r0, r3
 8002438:	f04f 0100 	mov.w	r1, #0
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	1894      	adds	r4, r2, r2
 8002442:	603c      	str	r4, [r7, #0]
 8002444:	415b      	adcs	r3, r3
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800244c:	1812      	adds	r2, r2, r0
 800244e:	eb41 0303 	adc.w	r3, r1, r3
 8002452:	f04f 0400 	mov.w	r4, #0
 8002456:	f04f 0500 	mov.w	r5, #0
 800245a:	00dd      	lsls	r5, r3, #3
 800245c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002460:	00d4      	lsls	r4, r2, #3
 8002462:	4622      	mov	r2, r4
 8002464:	462b      	mov	r3, r5
 8002466:	eb12 0a00 	adds.w	sl, r2, r0
 800246a:	eb43 0b01 	adc.w	fp, r3, r1
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f04f 0100 	mov.w	r1, #0
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	008b      	lsls	r3, r1, #2
 8002482:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002486:	0082      	lsls	r2, r0, #2
 8002488:	4650      	mov	r0, sl
 800248a:	4659      	mov	r1, fp
 800248c:	f7fd fea8 	bl	80001e0 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <UART_SetConfig+0x38c>)
 8002496:	fba3 1302 	umull	r1, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2164      	movs	r1, #100	; 0x64
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	; 0x32
 80024a8:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <UART_SetConfig+0x38c>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4432      	add	r2, r6
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	377c      	adds	r7, #124	; 0x7c
 80024c0:	46bd      	mov	sp, r7
 80024c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	40011400 	.word	0x40011400
 80024d0:	51eb851f 	.word	0x51eb851f

080024d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e6:	2b84      	cmp	r3, #132	; 0x84
 80024e8:	d005      	beq.n	80024f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	3303      	adds	r3, #3
 80024f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002508:	f000 fade 	bl	8002ac8 <vTaskStartScheduler>
  
  return osOK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	bd80      	pop	{r7, pc}

08002512 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002514:	b089      	sub	sp, #36	; 0x24
 8002516:	af04      	add	r7, sp, #16
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d020      	beq.n	8002566 <osThreadCreate+0x54>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01c      	beq.n	8002566 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685c      	ldr	r4, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681d      	ldr	r5, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691e      	ldr	r6, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffc8 	bl	80024d4 <makeFreeRtosPriority>
 8002544:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800254e:	9202      	str	r2, [sp, #8]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9100      	str	r1, [sp, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4632      	mov	r2, r6
 8002558:	4629      	mov	r1, r5
 800255a:	4620      	mov	r0, r4
 800255c:	f000 f8ed 	bl	800273a <xTaskCreateStatic>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e01c      	b.n	80025a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685c      	ldr	r4, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002572:	b29e      	uxth	r6, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffaa 	bl	80024d4 <makeFreeRtosPriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	4632      	mov	r2, r6
 800258e:	4629      	mov	r1, r5
 8002590:	4620      	mov	r0, r4
 8002592:	f000 f92f 	bl	80027f4 <xTaskCreate>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d001      	beq.n	80025a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025a0:	68fb      	ldr	r3, [r7, #12]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <osDelay+0x16>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	e000      	b.n	80025c2 <osDelay+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fa4c 	bl	8002a60 <vTaskDelay>
  
  return osOK;
 80025c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0208 	add.w	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0208 	add.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 0208 	add.w	r2, r3, #8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	601a      	str	r2, [r3, #0]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d103      	bne.n	8002694 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e00c      	b.n	80026ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3308      	adds	r3, #8
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e002      	b.n	80026a2 <vListInsert+0x2e>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d2f6      	bcs.n	800269c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6852      	ldr	r2, [r2, #4]
 8002706:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d103      	bne.n	800271a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08e      	sub	sp, #56	; 0x38
 800273e:	af04      	add	r7, sp, #16
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <xTaskCreateStatic+0x46>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	61fb      	str	r3, [r7, #28]
}
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002780:	2354      	movs	r3, #84	; 0x54
 8002782:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b54      	cmp	r3, #84	; 0x54
 8002788:	d00a      	beq.n	80027a0 <xTaskCreateStatic+0x66>
	__asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	61bb      	str	r3, [r7, #24]
}
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01e      	beq.n	80027e6 <xTaskCreateStatic+0xac>
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01b      	beq.n	80027e6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027c0:	2300      	movs	r3, #0
 80027c2:	9303      	str	r3, [sp, #12]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	9302      	str	r3, [sp, #8]
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f850 	bl	800287e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027e0:	f000 f8d4 	bl	800298c <prvAddNewTaskToReadyList>
 80027e4:	e001      	b.n	80027ea <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027ea:	697b      	ldr	r3, [r7, #20]
	}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3728      	adds	r7, #40	; 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08c      	sub	sp, #48	; 0x30
 80027f8:	af04      	add	r7, sp, #16
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fec5 	bl	8003598 <pvPortMalloc>
 800280e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002816:	2054      	movs	r0, #84	; 0x54
 8002818:	f000 febe 	bl	8003598 <pvPortMalloc>
 800281c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
 800282a:	e005      	b.n	8002838 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800282c:	6978      	ldr	r0, [r7, #20]
 800282e:	f000 ff7f 	bl	8003730 <vPortFree>
 8002832:	e001      	b.n	8002838 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d017      	beq.n	800286e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	2300      	movs	r3, #0
 800284a:	9303      	str	r3, [sp, #12]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	9302      	str	r3, [sp, #8]
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f80e 	bl	800287e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002862:	69f8      	ldr	r0, [r7, #28]
 8002864:	f000 f892 	bl	800298c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	e002      	b.n	8002874 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002874:	69bb      	ldr	r3, [r7, #24]
	}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b088      	sub	sp, #32
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002896:	3b01      	subs	r3, #1
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f023 0307 	bic.w	r3, r3, #7
 80028a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <prvInitialiseNewTask+0x48>
	__asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	617b      	str	r3, [r7, #20]
}
 80028c2:	bf00      	nop
 80028c4:	e7fe      	b.n	80028c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01f      	beq.n	800290c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028cc:	2300      	movs	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e012      	b.n	80028f8 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	7819      	ldrb	r1, [r3, #0]
 80028da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	3334      	adds	r3, #52	; 0x34
 80028e2:	460a      	mov	r2, r1
 80028e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b0f      	cmp	r3, #15
 80028fc:	d9e9      	bls.n	80028d2 <prvInitialiseNewTask+0x54>
 80028fe:	e000      	b.n	8002902 <prvInitialiseNewTask+0x84>
			{
				break;
 8002900:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290a:	e003      	b.n	8002914 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2b06      	cmp	r3, #6
 8002918:	d901      	bls.n	800291e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800291a:	2306      	movs	r3, #6
 800291c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	2200      	movs	r2, #0
 800292e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fe6c 	bl	8002612 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	3318      	adds	r3, #24
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe67 	bl	8002612 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002948:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	f1c3 0207 	rsb	r2, r3, #7
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	2200      	movs	r2, #0
 800295e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	69b8      	ldr	r0, [r7, #24]
 800296e:	f000 fc05 	bl	800317c <pxPortInitialiseStack>
 8002972:	4602      	mov	r2, r0
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002982:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002994:	f000 fd1e 	bl	80033d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <prvAddNewTaskToReadyList+0xb8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	3301      	adds	r3, #1
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <prvAddNewTaskToReadyList+0xb8>)
 80029a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <prvAddNewTaskToReadyList+0xbc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <prvAddNewTaskToReadyList+0xbc>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <prvAddNewTaskToReadyList+0xb8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d110      	bne.n	80029da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029b8:	f000 fabc 	bl	8002f34 <prvInitialiseTaskLists>
 80029bc:	e00d      	b.n	80029da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <prvAddNewTaskToReadyList+0xc0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <prvAddNewTaskToReadyList+0xbc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d802      	bhi.n	80029da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <prvAddNewTaskToReadyList+0xbc>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <prvAddNewTaskToReadyList+0xc4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <prvAddNewTaskToReadyList+0xc4>)
 80029e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	2201      	movs	r2, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <prvAddNewTaskToReadyList+0xc8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <prvAddNewTaskToReadyList+0xc8>)
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <prvAddNewTaskToReadyList+0xcc>)
 8002a04:	441a      	add	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f7ff fe0d 	bl	800262c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a12:	f000 fd0f 	bl	8003434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a16:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <prvAddNewTaskToReadyList+0xc0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00e      	beq.n	8002a3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <prvAddNewTaskToReadyList+0xbc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <prvAddNewTaskToReadyList+0xd0>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000380 	.word	0x20000380
 8002a48:	20000280 	.word	0x20000280
 8002a4c:	2000038c 	.word	0x2000038c
 8002a50:	2000039c 	.word	0x2000039c
 8002a54:	20000388 	.word	0x20000388
 8002a58:	20000284 	.word	0x20000284
 8002a5c:	e000ed04 	.word	0xe000ed04

08002a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d017      	beq.n	8002aa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <vTaskDelay+0x60>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <vTaskDelay+0x30>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	60bb      	str	r3, [r7, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a90:	f000 f87a 	bl	8002b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a94:	2100      	movs	r1, #0
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 fb0a 	bl	80030b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a9c:	f000 f882 	bl	8002ba4 <xTaskResumeAll>
 8002aa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d107      	bne.n	8002ab8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <vTaskDelay+0x64>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200003a8 	.word	0x200003a8
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ad6:	463a      	mov	r2, r7
 8002ad8:	1d39      	adds	r1, r7, #4
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fcfa 	bl	80004d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ae4:	6839      	ldr	r1, [r7, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	9202      	str	r2, [sp, #8]
 8002aec:	9301      	str	r3, [sp, #4]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2300      	movs	r3, #0
 8002af4:	460a      	mov	r2, r1
 8002af6:	491e      	ldr	r1, [pc, #120]	; (8002b70 <vTaskStartScheduler+0xa8>)
 8002af8:	481e      	ldr	r0, [pc, #120]	; (8002b74 <vTaskStartScheduler+0xac>)
 8002afa:	f7ff fe1e 	bl	800273a <xTaskCreateStatic>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <vTaskStartScheduler+0xb0>)
 8002b02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b04:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <vTaskStartScheduler+0xb0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e001      	b.n	8002b16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d116      	bne.n	8002b4a <vTaskStartScheduler+0x82>
	__asm volatile
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	613b      	str	r3, [r7, #16]
}
 8002b2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <vTaskStartScheduler+0xb4>)
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295
 8002b36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <vTaskStartScheduler+0xb8>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <vTaskStartScheduler+0xbc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b44:	f000 fba4 	bl	8003290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b48:	e00e      	b.n	8002b68 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d10a      	bne.n	8002b68 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60fb      	str	r3, [r7, #12]
}
 8002b64:	bf00      	nop
 8002b66:	e7fe      	b.n	8002b66 <vTaskStartScheduler+0x9e>
}
 8002b68:	bf00      	nop
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	08003a4c 	.word	0x08003a4c
 8002b74:	08002f05 	.word	0x08002f05
 8002b78:	200003a4 	.word	0x200003a4
 8002b7c:	200003a0 	.word	0x200003a0
 8002b80:	2000038c 	.word	0x2000038c
 8002b84:	20000384 	.word	0x20000384

08002b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <vTaskSuspendAll+0x18>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	4a03      	ldr	r2, [pc, #12]	; (8002ba0 <vTaskSuspendAll+0x18>)
 8002b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	200003a8 	.word	0x200003a8

08002ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <xTaskResumeAll+0x114>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbe:	f383 8811 	msr	BASEPRI, r3
 8002bc2:	f3bf 8f6f 	isb	sy
 8002bc6:	f3bf 8f4f 	dsb	sy
 8002bca:	603b      	str	r3, [r7, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	e7fe      	b.n	8002bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bd0:	f000 fc00 	bl	80033d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bd4:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <xTaskResumeAll+0x114>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	4a37      	ldr	r2, [pc, #220]	; (8002cb8 <xTaskResumeAll+0x114>)
 8002bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <xTaskResumeAll+0x114>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d161      	bne.n	8002caa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be6:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <xTaskResumeAll+0x118>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d05d      	beq.n	8002caa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bee:	e02e      	b.n	8002c4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <xTaskResumeAll+0x11c>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fd72 	bl	80026e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fd6d 	bl	80026e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2201      	movs	r2, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <xTaskResumeAll+0x120>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <xTaskResumeAll+0x120>)
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <xTaskResumeAll+0x124>)
 8002c2c:	441a      	add	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3304      	adds	r3, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4610      	mov	r0, r2
 8002c36:	f7ff fcf9 	bl	800262c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <xTaskResumeAll+0x128>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c48:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <xTaskResumeAll+0x12c>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <xTaskResumeAll+0x11c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1cc      	bne.n	8002bf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c5c:	f000 fa08 	bl	8003070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c60:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <xTaskResumeAll+0x130>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c6c:	f000 f836 	bl	8002cdc <xTaskIncrementTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <xTaskResumeAll+0x12c>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f1      	bne.n	8002c6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <xTaskResumeAll+0x130>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <xTaskResumeAll+0x12c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <xTaskResumeAll+0x134>)
 8002c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002caa:	f000 fbc3 	bl	8003434 <vPortExitCritical>

	return xAlreadyYielded;
 8002cae:	68bb      	ldr	r3, [r7, #8]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200003a8 	.word	0x200003a8
 8002cbc:	20000380 	.word	0x20000380
 8002cc0:	20000340 	.word	0x20000340
 8002cc4:	20000388 	.word	0x20000388
 8002cc8:	20000284 	.word	0x20000284
 8002ccc:	20000280 	.word	0x20000280
 8002cd0:	20000394 	.word	0x20000394
 8002cd4:	20000390 	.word	0x20000390
 8002cd8:	e000ed04 	.word	0xe000ed04

08002cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce6:	4b4e      	ldr	r3, [pc, #312]	; (8002e20 <xTaskIncrementTick+0x144>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 808e 	bne.w	8002e0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <xTaskIncrementTick+0x148>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cf8:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <xTaskIncrementTick+0x148>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d120      	bne.n	8002d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d04:	4b48      	ldr	r3, [pc, #288]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	603b      	str	r3, [r7, #0]
}
 8002d20:	bf00      	nop
 8002d22:	e7fe      	b.n	8002d22 <xTaskIncrementTick+0x46>
 8002d24:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a3e      	ldr	r2, [pc, #248]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4a3e      	ldr	r2, [pc, #248]	; (8002e2c <xTaskIncrementTick+0x150>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b3d      	ldr	r3, [pc, #244]	; (8002e30 <xTaskIncrementTick+0x154>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <xTaskIncrementTick+0x154>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	f000 f995 	bl	8003070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d46:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <xTaskIncrementTick+0x158>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d348      	bcc.n	8002de2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5a:	4b36      	ldr	r3, [pc, #216]	; (8002e34 <xTaskIncrementTick+0x158>)
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	601a      	str	r2, [r3, #0]
					break;
 8002d62:	e03e      	b.n	8002de2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <xTaskIncrementTick+0x14c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d203      	bcs.n	8002d84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <xTaskIncrementTick+0x158>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d82:	e02e      	b.n	8002de2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fcac 	bl	80026e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3318      	adds	r3, #24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fca3 	bl	80026e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	2201      	movs	r2, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <xTaskIncrementTick+0x15c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <xTaskIncrementTick+0x15c>)
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4a1f      	ldr	r2, [pc, #124]	; (8002e3c <xTaskIncrementTick+0x160>)
 8002dc0:	441a      	add	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f7ff fc2f 	bl	800262c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <xTaskIncrementTick+0x164>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3b9      	bcc.n	8002d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de0:	e7b6      	b.n	8002d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <xTaskIncrementTick+0x164>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	4914      	ldr	r1, [pc, #80]	; (8002e3c <xTaskIncrementTick+0x160>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d901      	bls.n	8002dfe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002dfe:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <xTaskIncrementTick+0x168>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d007      	beq.n	8002e16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e004      	b.n	8002e16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <xTaskIncrementTick+0x16c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <xTaskIncrementTick+0x16c>)
 8002e14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e16:	697b      	ldr	r3, [r7, #20]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200003a8 	.word	0x200003a8
 8002e24:	20000384 	.word	0x20000384
 8002e28:	20000338 	.word	0x20000338
 8002e2c:	2000033c 	.word	0x2000033c
 8002e30:	20000398 	.word	0x20000398
 8002e34:	200003a0 	.word	0x200003a0
 8002e38:	20000388 	.word	0x20000388
 8002e3c:	20000284 	.word	0x20000284
 8002e40:	20000280 	.word	0x20000280
 8002e44:	20000394 	.word	0x20000394
 8002e48:	20000390 	.word	0x20000390

08002e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e52:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <vTaskSwitchContext+0xa4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e60:	e03f      	b.n	8002ee2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <vTaskSwitchContext+0xa8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e68:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <vTaskSwitchContext+0xac>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	f1c3 031f 	rsb	r3, r3, #31
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	491f      	ldr	r1, [pc, #124]	; (8002efc <vTaskSwitchContext+0xb0>)
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <vTaskSwitchContext+0x5a>
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a12      	ldr	r2, [pc, #72]	; (8002efc <vTaskSwitchContext+0xb0>)
 8002eb4:	4413      	add	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d104      	bne.n	8002ed8 <vTaskSwitchContext+0x8c>
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <vTaskSwitchContext+0xb4>)
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200003a8 	.word	0x200003a8
 8002ef4:	20000394 	.word	0x20000394
 8002ef8:	20000388 	.word	0x20000388
 8002efc:	20000284 	.word	0x20000284
 8002f00:	20000280 	.word	0x20000280

08002f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f0c:	f000 f852 	bl	8002fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <prvIdleTask+0x28>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d9f9      	bls.n	8002f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <prvIdleTask+0x2c>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f28:	e7f0      	b.n	8002f0c <prvIdleTask+0x8>
 8002f2a:	bf00      	nop
 8002f2c:	20000284 	.word	0x20000284
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	e00c      	b.n	8002f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <prvInitialiseTaskLists+0x60>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb3f 	bl	80025d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d9ef      	bls.n	8002f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f60:	480d      	ldr	r0, [pc, #52]	; (8002f98 <prvInitialiseTaskLists+0x64>)
 8002f62:	f7ff fb36 	bl	80025d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f66:	480d      	ldr	r0, [pc, #52]	; (8002f9c <prvInitialiseTaskLists+0x68>)
 8002f68:	f7ff fb33 	bl	80025d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f6c:	480c      	ldr	r0, [pc, #48]	; (8002fa0 <prvInitialiseTaskLists+0x6c>)
 8002f6e:	f7ff fb30 	bl	80025d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f72:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <prvInitialiseTaskLists+0x70>)
 8002f74:	f7ff fb2d 	bl	80025d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <prvInitialiseTaskLists+0x74>)
 8002f7a:	f7ff fb2a 	bl	80025d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <prvInitialiseTaskLists+0x78>)
 8002f80:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <prvInitialiseTaskLists+0x64>)
 8002f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <prvInitialiseTaskLists+0x7c>)
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <prvInitialiseTaskLists+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000284 	.word	0x20000284
 8002f98:	20000310 	.word	0x20000310
 8002f9c:	20000324 	.word	0x20000324
 8002fa0:	20000340 	.word	0x20000340
 8002fa4:	20000354 	.word	0x20000354
 8002fa8:	2000036c 	.word	0x2000036c
 8002fac:	20000338 	.word	0x20000338
 8002fb0:	2000033c 	.word	0x2000033c

08002fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fba:	e019      	b.n	8002ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fbc:	f000 fa0a 	bl	80033d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <prvCheckTasksWaitingTermination+0x50>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff fb8a 	bl	80026e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <prvCheckTasksWaitingTermination+0x54>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <prvCheckTasksWaitingTermination+0x54>)
 8002fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fe6:	f000 fa25 	bl	8003434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f810 	bl	8003010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <prvCheckTasksWaitingTermination+0x58>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e1      	bne.n	8002fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000354 	.word	0x20000354
 8003008:	20000380 	.word	0x20000380
 800300c:	20000368 	.word	0x20000368

08003010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fb82 	bl	8003730 <vPortFree>
				vPortFree( pxTCB );
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fb7f 	bl	8003730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003032:	e018      	b.n	8003066 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303a:	2b01      	cmp	r3, #1
 800303c:	d103      	bne.n	8003046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fb76 	bl	8003730 <vPortFree>
	}
 8003044:	e00f      	b.n	8003066 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304c:	2b02      	cmp	r3, #2
 800304e:	d00a      	beq.n	8003066 <prvDeleteTCB+0x56>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	60fb      	str	r3, [r7, #12]
}
 8003062:	bf00      	nop
 8003064:	e7fe      	b.n	8003064 <prvDeleteTCB+0x54>
	}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d104      	bne.n	800308a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 8003082:	f04f 32ff 	mov.w	r2, #4294967295
 8003086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003088:	e008      	b.n	800309c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <prvResetNextTaskUnblockTime+0x38>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <prvResetNextTaskUnblockTime+0x3c>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000338 	.word	0x20000338
 80030ac:	200003a0 	.word	0x200003a0

080030b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <prvAddCurrentTaskToDelayedList+0xb0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fb0d 	bl	80026e6 <uxListRemove>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10b      	bne.n	80030ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2201      	movs	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4013      	ands	r3, r2
 80030e6:	4a20      	ldr	r2, [pc, #128]	; (8003168 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d10a      	bne.n	8003108 <prvAddCurrentTaskToDelayedList+0x58>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030f8:	4b1a      	ldr	r3, [pc, #104]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4619      	mov	r1, r3
 8003100:	481a      	ldr	r0, [pc, #104]	; (800316c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003102:	f7ff fa93 	bl	800262c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003106:	e026      	b.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	429a      	cmp	r2, r3
 800311e:	d209      	bcs.n	8003134 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f7ff faa1 	bl	8002674 <vListInsert>
}
 8003132:	e010      	b.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4610      	mov	r0, r2
 8003142:	f7ff fa97 	bl	8002674 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	429a      	cmp	r2, r3
 800314e:	d202      	bcs.n	8003156 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000384 	.word	0x20000384
 8003164:	20000280 	.word	0x20000280
 8003168:	20000388 	.word	0x20000388
 800316c:	2000036c 	.word	0x2000036c
 8003170:	2000033c 	.word	0x2000033c
 8003174:	20000338 	.word	0x20000338
 8003178:	200003a0 	.word	0x200003a0

0800317c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b04      	subs	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3b04      	subs	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3b04      	subs	r3, #4
 80031aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80031ac:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <pxPortInitialiseStack+0x64>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3b14      	subs	r3, #20
 80031b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3b04      	subs	r3, #4
 80031c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f06f 0202 	mvn.w	r2, #2
 80031ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b20      	subs	r3, #32
 80031d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	080031e5 	.word	0x080031e5

080031e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <prvTaskExitError+0x54>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f6:	d00a      	beq.n	800320e <prvTaskExitError+0x2a>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	60fb      	str	r3, [r7, #12]
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <prvTaskExitError+0x28>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60bb      	str	r3, [r7, #8]
}
 8003220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003222:	bf00      	nop
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0fc      	beq.n	8003224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	2000000c 	.word	0x2000000c
 800323c:	00000000 	.word	0x00000000

08003240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <pxCurrentTCBConst2>)
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	6808      	ldr	r0, [r1, #0]
 8003246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800324a:	f380 8809 	msr	PSP, r0
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8811 	msr	BASEPRI, r0
 800325a:	4770      	bx	lr
 800325c:	f3af 8000 	nop.w

08003260 <pxCurrentTCBConst2>:
 8003260:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003268:	4808      	ldr	r0, [pc, #32]	; (800328c <prvPortStartFirstTask+0x24>)
 800326a:	6800      	ldr	r0, [r0, #0]
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f380 8808 	msr	MSP, r0
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f380 8814 	msr	CONTROL, r0
 800327a:	b662      	cpsie	i
 800327c:	b661      	cpsie	f
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	df00      	svc	0
 8003288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800328a:	bf00      	nop
 800328c:	e000ed08 	.word	0xe000ed08

08003290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003296:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <xPortStartScheduler+0x120>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a46      	ldr	r2, [pc, #280]	; (80033b4 <xPortStartScheduler+0x124>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d10a      	bne.n	80032b6 <xPortStartScheduler+0x26>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	613b      	str	r3, [r7, #16]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80032b6:	4b3e      	ldr	r3, [pc, #248]	; (80033b0 <xPortStartScheduler+0x120>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <xPortStartScheduler+0x128>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10a      	bne.n	80032d6 <xPortStartScheduler+0x46>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	60fb      	str	r3, [r7, #12]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032d6:	4b39      	ldr	r3, [pc, #228]	; (80033bc <xPortStartScheduler+0x12c>)
 80032d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <xPortStartScheduler+0x130>)
 80032fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <xPortStartScheduler+0x134>)
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003304:	e009      	b.n	800331a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <xPortStartScheduler+0x134>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3b01      	subs	r3, #1
 800330c:	4a2d      	ldr	r2, [pc, #180]	; (80033c4 <xPortStartScheduler+0x134>)
 800330e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d0ef      	beq.n	8003306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <xPortStartScheduler+0x134>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1c3 0307 	rsb	r3, r3, #7
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00a      	beq.n	8003348 <xPortStartScheduler+0xb8>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	60bb      	str	r3, [r7, #8]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <xPortStartScheduler+0x134>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <xPortStartScheduler+0x134>)
 8003350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <xPortStartScheduler+0x134>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800335a:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <xPortStartScheduler+0x134>)
 800335c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <xPortStartScheduler+0x138>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <xPortStartScheduler+0x138>)
 800336c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003372:	4b15      	ldr	r3, [pc, #84]	; (80033c8 <xPortStartScheduler+0x138>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a14      	ldr	r2, [pc, #80]	; (80033c8 <xPortStartScheduler+0x138>)
 8003378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800337c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800337e:	f000 f8dd 	bl	800353c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <xPortStartScheduler+0x13c>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003388:	f000 f8fc 	bl	8003584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <xPortStartScheduler+0x140>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <xPortStartScheduler+0x140>)
 8003392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003398:	f7ff ff66 	bl	8003268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800339c:	f7ff fd56 	bl	8002e4c <vTaskSwitchContext>
	prvTaskExitError();
 80033a0:	f7ff ff20 	bl	80031e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00
 80033b4:	410fc271 	.word	0x410fc271
 80033b8:	410fc270 	.word	0x410fc270
 80033bc:	e000e400 	.word	0xe000e400
 80033c0:	200003ac 	.word	0x200003ac
 80033c4:	200003b0 	.word	0x200003b0
 80033c8:	e000ed20 	.word	0xe000ed20
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	e000ef34 	.word	0xe000ef34

080033d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
	__asm volatile
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	607b      	str	r3, [r7, #4]
}
 80033ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <vPortEnterCritical+0x58>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a0d      	ldr	r2, [pc, #52]	; (800342c <vPortEnterCritical+0x58>)
 80033f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <vPortEnterCritical+0x58>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10f      	bne.n	8003420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <vPortEnterCritical+0x5c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <vPortEnterCritical+0x4c>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	603b      	str	r3, [r7, #0]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <vPortEnterCritical+0x4a>
	}
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	2000000c 	.word	0x2000000c
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <vPortExitCritical+0x50>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <vPortExitCritical+0x24>
	__asm volatile
 8003442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003446:	f383 8811 	msr	BASEPRI, r3
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f3bf 8f4f 	dsb	sy
 8003452:	607b      	str	r3, [r7, #4]
}
 8003454:	bf00      	nop
 8003456:	e7fe      	b.n	8003456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <vPortExitCritical+0x50>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <vPortExitCritical+0x50>)
 8003460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <vPortExitCritical+0x50>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <vPortExitCritical+0x42>
 800346a:	2300      	movs	r3, #0
 800346c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	2000000c 	.word	0x2000000c
	...

08003490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003490:	f3ef 8009 	mrs	r0, PSP
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <pxCurrentTCBConst>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	f01e 0f10 	tst.w	lr, #16
 80034a0:	bf08      	it	eq
 80034a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034aa:	6010      	str	r0, [r2, #0]
 80034ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80034b4:	f380 8811 	msr	BASEPRI, r0
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f7ff fcc4 	bl	8002e4c <vTaskSwitchContext>
 80034c4:	f04f 0000 	mov.w	r0, #0
 80034c8:	f380 8811 	msr	BASEPRI, r0
 80034cc:	bc09      	pop	{r0, r3}
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	6808      	ldr	r0, [r1, #0]
 80034d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d6:	f01e 0f10 	tst.w	lr, #16
 80034da:	bf08      	it	eq
 80034dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034e0:	f380 8809 	msr	PSP, r0
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst>:
 80034f0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	607b      	str	r3, [r7, #4]
}
 8003510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003512:	f7ff fbe3 	bl	8002cdc <xTaskIncrementTick>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <SysTick_Handler+0x40>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	2300      	movs	r3, #0
 8003526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f383 8811 	msr	BASEPRI, r3
}
 800352e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	e000ed04 	.word	0xe000ed04

0800353c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <vPortSetupTimerInterrupt+0x38>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <vPortSetupTimerInterrupt+0x3c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <vPortSetupTimerInterrupt+0x40>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	099b      	lsrs	r3, r3, #6
 8003558:	4a09      	ldr	r2, [pc, #36]	; (8003580 <vPortSetupTimerInterrupt+0x44>)
 800355a:	3b01      	subs	r3, #1
 800355c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <vPortSetupTimerInterrupt+0x34>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000e010 	.word	0xe000e010
 8003574:	e000e018 	.word	0xe000e018
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3
 8003580:	e000e014 	.word	0xe000e014

08003584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003594 <vPortEnableVFP+0x10>
 8003588:	6801      	ldr	r1, [r0, #0]
 800358a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800358e:	6001      	str	r1, [r0, #0]
 8003590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003592:	bf00      	nop
 8003594:	e000ed88 	.word	0xe000ed88

08003598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80035a4:	f7ff faf0 	bl	8002b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80035a8:	4b5b      	ldr	r3, [pc, #364]	; (8003718 <pvPortMalloc+0x180>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80035b0:	f000 f920 	bl	80037f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <pvPortMalloc+0x184>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 8093 	bne.w	80036e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01d      	beq.n	8003604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80035c8:	2208      	movs	r2, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d014      	beq.n	8003604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f023 0307 	bic.w	r3, r3, #7
 80035e0:	3308      	adds	r3, #8
 80035e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <pvPortMalloc+0x6c>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	617b      	str	r3, [r7, #20]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d06e      	beq.n	80036e8 <pvPortMalloc+0x150>
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <pvPortMalloc+0x188>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d869      	bhi.n	80036e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <pvPortMalloc+0x18c>)
 8003616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003618:	4b42      	ldr	r3, [pc, #264]	; (8003724 <pvPortMalloc+0x18c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800361e:	e004      	b.n	800362a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d903      	bls.n	800363c <pvPortMalloc+0xa4>
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f1      	bne.n	8003620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800363c:	4b36      	ldr	r3, [pc, #216]	; (8003718 <pvPortMalloc+0x180>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d050      	beq.n	80036e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2208      	movs	r2, #8
 800364c:	4413      	add	r3, r2
 800364e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	2308      	movs	r3, #8
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	429a      	cmp	r2, r3
 8003666:	d91f      	bls.n	80036a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <pvPortMalloc+0xf8>
	__asm volatile
 800367a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367e:	f383 8811 	msr	BASEPRI, r3
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	613b      	str	r3, [r7, #16]
}
 800368c:	bf00      	nop
 800368e:	e7fe      	b.n	800368e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad2      	subs	r2, r2, r3
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036a2:	69b8      	ldr	r0, [r7, #24]
 80036a4:	f000 f908 	bl	80038b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <pvPortMalloc+0x188>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <pvPortMalloc+0x188>)
 80036b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <pvPortMalloc+0x188>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <pvPortMalloc+0x190>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d203      	bcs.n	80036ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036c2:	4b17      	ldr	r3, [pc, #92]	; (8003720 <pvPortMalloc+0x188>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a18      	ldr	r2, [pc, #96]	; (8003728 <pvPortMalloc+0x190>)
 80036c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <pvPortMalloc+0x184>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <pvPortMalloc+0x194>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <pvPortMalloc+0x194>)
 80036e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036e8:	f7ff fa5c 	bl	8002ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <pvPortMalloc+0x174>
	__asm volatile
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	60fb      	str	r3, [r7, #12]
}
 8003708:	bf00      	nop
 800370a:	e7fe      	b.n	800370a <pvPortMalloc+0x172>
	return pvReturn;
 800370c:	69fb      	ldr	r3, [r7, #28]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3728      	adds	r7, #40	; 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20003fbc 	.word	0x20003fbc
 800371c:	20003fd0 	.word	0x20003fd0
 8003720:	20003fc0 	.word	0x20003fc0
 8003724:	20003fb4 	.word	0x20003fb4
 8003728:	20003fc4 	.word	0x20003fc4
 800372c:	20003fc8 	.word	0x20003fc8

08003730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04d      	beq.n	80037de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003742:	2308      	movs	r3, #8
 8003744:	425b      	negs	r3, r3
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <vPortFree+0xb8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <vPortFree+0x44>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	60fb      	str	r3, [r7, #12]
}
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <vPortFree+0x62>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60bb      	str	r3, [r7, #8]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <vPortFree+0xb8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01e      	beq.n	80037de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11a      	bne.n	80037de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <vPortFree+0xb8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80037b8:	f7ff f9e6 	bl	8002b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <vPortFree+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <vPortFree+0xbc>)
 80037c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037ca:	6938      	ldr	r0, [r7, #16]
 80037cc:	f000 f874 	bl	80038b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <vPortFree+0xc0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <vPortFree+0xc0>)
 80037d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80037da:	f7ff f9e3 	bl	8002ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20003fd0 	.word	0x20003fd0
 80037ec:	20003fc0 	.word	0x20003fc0
 80037f0:	20003fcc 	.word	0x20003fcc

080037f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80037fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <prvHeapInit+0xac>)
 8003802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3307      	adds	r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <prvHeapInit+0xac>)
 8003824:	4413      	add	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800382c:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <prvHeapInit+0xb0>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <prvHeapInit+0xb0>)
 8003834:	2200      	movs	r2, #0
 8003836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4413      	add	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003840:	2208      	movs	r2, #8
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0307 	bic.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <prvHeapInit+0xb4>)
 8003854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003856:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <prvHeapInit+0xb4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <prvHeapInit+0xb4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	1ad2      	subs	r2, r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <prvHeapInit+0xb4>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <prvHeapInit+0xb8>)
 8003882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <prvHeapInit+0xbc>)
 800388a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <prvHeapInit+0xc0>)
 800388e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003892:	601a      	str	r2, [r3, #0]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	200003b4 	.word	0x200003b4
 80038a4:	20003fb4 	.word	0x20003fb4
 80038a8:	20003fbc 	.word	0x20003fbc
 80038ac:	20003fc4 	.word	0x20003fc4
 80038b0:	20003fc0 	.word	0x20003fc0
 80038b4:	20003fd0 	.word	0x20003fd0

080038b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <prvInsertBlockIntoFreeList+0xac>)
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e002      	b.n	80038cc <prvInsertBlockIntoFreeList+0x14>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d8f7      	bhi.n	80038c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d108      	bne.n	80038fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	441a      	add	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d118      	bne.n	8003940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <prvInsertBlockIntoFreeList+0xb0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d00d      	beq.n	8003936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e008      	b.n	8003948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvInsertBlockIntoFreeList+0xb0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	e003      	b.n	8003948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d002      	beq.n	8003956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003956:	bf00      	nop
 8003958:	3714      	adds	r7, #20
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20003fb4 	.word	0x20003fb4
 8003968:	20003fbc 	.word	0x20003fbc

0800396c <__libc_init_array>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4d0d      	ldr	r5, [pc, #52]	; (80039a4 <__libc_init_array+0x38>)
 8003970:	4c0d      	ldr	r4, [pc, #52]	; (80039a8 <__libc_init_array+0x3c>)
 8003972:	1b64      	subs	r4, r4, r5
 8003974:	10a4      	asrs	r4, r4, #2
 8003976:	2600      	movs	r6, #0
 8003978:	42a6      	cmp	r6, r4
 800397a:	d109      	bne.n	8003990 <__libc_init_array+0x24>
 800397c:	4d0b      	ldr	r5, [pc, #44]	; (80039ac <__libc_init_array+0x40>)
 800397e:	4c0c      	ldr	r4, [pc, #48]	; (80039b0 <__libc_init_array+0x44>)
 8003980:	f000 f820 	bl	80039c4 <_init>
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	2600      	movs	r6, #0
 800398a:	42a6      	cmp	r6, r4
 800398c:	d105      	bne.n	800399a <__libc_init_array+0x2e>
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	f855 3b04 	ldr.w	r3, [r5], #4
 8003994:	4798      	blx	r3
 8003996:	3601      	adds	r6, #1
 8003998:	e7ee      	b.n	8003978 <__libc_init_array+0xc>
 800399a:	f855 3b04 	ldr.w	r3, [r5], #4
 800399e:	4798      	blx	r3
 80039a0:	3601      	adds	r6, #1
 80039a2:	e7f2      	b.n	800398a <__libc_init_array+0x1e>
 80039a4:	08003a74 	.word	0x08003a74
 80039a8:	08003a74 	.word	0x08003a74
 80039ac:	08003a74 	.word	0x08003a74
 80039b0:	08003a78 	.word	0x08003a78

080039b4 <memset>:
 80039b4:	4402      	add	r2, r0
 80039b6:	4603      	mov	r3, r0
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d100      	bne.n	80039be <memset+0xa>
 80039bc:	4770      	bx	lr
 80039be:	f803 1b01 	strb.w	r1, [r3], #1
 80039c2:	e7f9      	b.n	80039b8 <memset+0x4>

080039c4 <_init>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	bf00      	nop
 80039c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ca:	bc08      	pop	{r3}
 80039cc:	469e      	mov	lr, r3
 80039ce:	4770      	bx	lr

080039d0 <_fini>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	bf00      	nop
 80039d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d6:	bc08      	pop	{r3}
 80039d8:	469e      	mov	lr, r3
 80039da:	4770      	bx	lr
